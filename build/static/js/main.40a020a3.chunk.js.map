{"version":3,"sources":["Components/ContactUs.js","context/auth.js","Components/Login.js","Components/About.js","Components/Home.js","Components/LeftSidebar.js","Components/StaffListScreen.js","hooks/useStaffApi.js","hooks/useApi.js","Components/StaffForm.js","Components/StaffNewScreen.js","Components/StaffEditScreen.js","Components/ReportsFooter.js","Components/MiddleContainer.js","Components/AdminPanel.js","Components/Footer.js","Components/NavbarPage.js","Components/Register.js","Components/PublicHolidays.js","Components/Roster/ShiftDetail.js","Components/Roster/AddShift.js","Components/Roster/Roster.js","Components/Roster/RosterScreen.js","Components/Roster/CreateRosterScreen.js","Components/Admin/AdminShiftScreen.js","Components/Wages/Wages.jsx","lib/convertUnixTime.js","lib/calculateBreak.js","lib/calculateCorrectPayWeeklyWagersRoster.js","lib/calculateReportTotals.js","lib/calculateHeadingsForReports.js","Components/Wages/ViewWeeklyWageRoster.jsx","lib/calculateCorrectPayWeeklyJobTitleRoster.js","Components/Wages/ViewWeeklyJobWageRoster.jsx","lib/calculateCorrectPayWeeklyStaffRoster.js","Components/Wages/ViewWeeklyStaffWagesRoster.jsx","Components/Group/CreateGroup.js","Components/Group/ViewGroups.js","Components/Group/GroupForm.js","Components/Group/GroupEditScreen.js","Components/Roster/ViewRoster.js","Components/Roster/WeeklyRoster.js","Components/Roster/ViewRosterScreen.js","Components/Admin/RosterAdmin.js","PrivateRoute.js","App.js","serviceWorker.js","index.js","lib/formValidation.js"],"names":["Profile","profile","className","src","alt","href","portfolio","target","rel","name","titile","linkedin","fab","icon","github","ContactUs","props","title","map","index","key","AuthContext","createContext","useAuth","useContext","Login","referer","useState","isLoggedIn","setLoggedIn","setIsError","email","setEmail","password","setPassword","setAuthTokens","location","state","handleSubmit","e","a","preventDefault","axios","post","user","result","data","alert","to","center","sm","md","lg","xl","onSubmit","label","group","type","validate","error","success","required","onChange","value","minLength","maxLength","onInvalid","invalidEmailMsg","onInput","pattern","invalidMinMaxMsg","Button","About","React","Component","Home","class","Jumbotron","LeftSidebar","authTokens","role","includes","caret","color","basic","divider","variant","searchByCriteraiList","tableColumnsAndDataKeys","StaffListScreen","setData","request","get","response","useStaffApi","getAllActiveStaffList","useEffect","dataSet","searchData","tableData","handleItemClick","itemClickRedirect","itemsPerPage","block","useApi","api","StaffForm","staff_id","staffId","firstname","setFirstName","lastname","setLastName","address","setAddress","city","setCity","setState","postcode","postCode","setPostCode","phone_number","phone","setPhone","roles","setRoles","groups","getAllGroups","getStaffRoles","loadGroups","i","length","x","staff_role_id","id","checked","history","useHistory","handleRemoveStaff","console","log","put","removedStaffMember","isActive","status","statusText","replace","handleUpdateSubmit","hasRole","assignedRoles","forEach","push","updatedStaffMember","newStaffMember","defaultChecked","newRoles","htmlFor","size","autoComplete","invalidNumber","toLowerCase","style","display","onClick","StaffNewScreen","StaffEditScreen","AdminPanel","NavbarPage","isOpen","setIsOpen","dark","expand","navbar","left","active","exact","right","Register","repassword","setRepassword","invalidRepasswordMsg","min","max","fieldName","nextElementSibling","textContent","setCustomValidity","displayInvalid","validity","tooShort","tooLong","displayValid","placeholder","aria-describedby","PublicHolidays","useAPI","getAllPublicHolidays","tempDateAdjusted","phol_date","slice","handleLoadPublicHolidays","ShiftDetail","startTime","endTime","handleAllocate","handleDeallocate","handleRemoveShift","handleClose","event","staff","shiftId","duration","staffMember","setStaffMember","setStaffId","moment","format","toFixed","member","staff_member_id","AddShift","handleAddItem","weekNumber","items","handleSetAddShift","startDate","selectedGroup","setSelectedGroup","createNext15MinuteTime","now","unix","Math","round","getTime","rounding","minutes","hour","newItems","sortedItems","sort","b","shift","shift_id","start_time","end_time","add","group_duration","canMove","canResize","isallocated","Roster","shifts","create","endDate","Date","toISOString","setItems","rosterWeekNumber","shiftDetails","setShiftDetails","addShift","setAddShift","getStaff","transformedData","transformTimes","toLocaleDateString","onItemContextMenu","time","onItemResize","itemId","edge","toLocaleString","item","oldStartTime","handleItemResize","defaultTimeStart","defaultTimeEnd","lineHeight","onItemMove","handleItemMove","onItemClick","filteredStaff","filter","itemRenderer","itemContext","timelineContext","getItemProps","getResizeProps","leftResizeProps","rightResizeProps","backgroundColor","selected","dragging","resizing","borderRadius","borderLeftWidth","borderRightWidth","useResizeHandle","height","flexDirection","overflow","textAlign","timeSteps","minute","day","month","year","splice","RosterScreen","CreateRosterScreen","weekNumberFromDatabase","getWeekNumber","numberOfShifts","setNumberOfShifts","setWeekNumber","setStartDate","setDate","getDate","setEndDate","setTitle","handleNumberOfShiftChange","newNumberOfShifts","groupsWithShifts","Object","keys","groupName","groupId","minDuration","shiftCount","j","itemStyles","itemProps","createShifts","disabled","utils","DateFnsUtils","DatePicker","minDate","minDateMessage","AdminShiftScreen","setMinDuration","staff_role","newShift","data-toggle","aria-haspopup","aria-expanded","Wages","rosters","getRosters","getTotalRosterOneWages","allUniqueUsernames","getAllUsernames","getTotalRosterOneRoleWages","getEachRosterWeekWagesByEachPersonAndRole","fluid","roster","roster_id","usernames","username","convertUnixTime","unixTimeInMilliseconds","toUTCString","calculateBreak","rostered_hours","rh","Number","calculatePay","temp_uniqueNames","objectLength","uniqueNames","Set","temp_rosteredHours","temp_breakTimeHours","temp_actualWorkTimeHours","jt","final_records","counter","pay_rate","breakTime","actualWorkTime","totalRosteredHours","reduce","total","currentValue","totalBreakTimeHours","totalActualWorkTimeHours","totalPay","acutalWorkTime","pay","calculateReportTotals","object","wagesTotal","rosteredHoursTotal","breakTimeTotal","actualWorkTimeTotal","totalsObject","totalWages","calculateHeadings","dataObject","tableHeader","first_record","entries","ref","createRef","options","orientation","unit","ViewWeeklyWageRoster","match","params","rosterID","getDesiredWeekWages","hasOwnProperty","shift_start","timeslot_from","shift_end","timeslot_to","newDataObject","calculateCorrectPay","reportTotals","width","targetRef","filename","y","scale","toPdf","wordBreak","bordered","hover","tableHeading","values","btn-block","temp_uniqueTitles","uniqueTitles","ViewWeeklyJobWageRoster","getDesiredWeekJobWages","clonedObject","assign","data2","calculateCorrectJobWagesPay","rosterIDandTitleArray","temp_pairs","temp_a","temp_b","ViewWeeklyStaffWageRoster","getWagesByDesiredUsername","calculateCorrectPayStaff","CreateGroup","groupTitle","setGroupTitle","groupDuration","setGroupDuration","payRate","setPayRate","newGroup","ViewGroup","GroupForm","handleRemoveGroup","delete","updatedGroup","classList","GroupEditScreen","ViewRoster","statusArray","WeeklyRoster","totalHour","getShifts","Total","shift_","index1","weekStart","week_start","weekEnd","week_end","rosterPeriod","count","nextDay","toDateString","rosterDay","arr","work_date","onLoad","shift_duration","break_length","rosterDate","individualDayTotal","ViewRosterScreen","setShifts","rosterPeriodDates","setRosterPeriodDates","weekNumbersFromDatabase","getWeekNumbers","getRosterPeriodDates","displayRoster","setDisplayRoster","loadData","week_number","shiftsData","rosterPeriodData","start_date","week","onMouseLeave","rosterPeriods","end_date","RosterAdmin","selectedDate","handleDateChange","PrivateRoute","component","rest","render","pathname","App","existingTokens","JSON","parse","localStorage","getItem","Provider","setItem","stringify","path","WeeklyWageRoster","WeeklyWageJobRoster","WeeklyWageStaffWagesRoster","ViewGroups","Boolean","window","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message","input","borderColor","previousElementSibling","module","exports","patternMismatch","isNaN"],"mappings":"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","file":"static/js/main.40a020a3.chunk.js","sourcesContent":["import React from \"react\";\n\nimport { MDBIcon } from \"mdbreact\";\n\nfunction Profile({ profile }) {\n  return (\n    <div className=\"col-sm profile-hover\">\n      <div className=\"cnt-block equal-hight\">\n        <figure>\n          <img\n            src=\"../images/Glen-Avatar.png\"\n            className=\"img-responsive\"\n            alt=\"\"\n          />\n        </figure>\n        <h3>\n          <a href={profile.portfolio} target=\"_blank\" rel=\"noopener noreferrer\">\n            {profile.name}\n          </a>\n        </h3>\n        <p>{profile.titile}</p>\n        <div>\n          <div>\n            <a\n              href={profile.linkedin}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <MDBIcon fab icon=\"linkedin\" />\n            </a>\n          </div>\n          <div>\n            <a href={profile.github} target=\"_blank\" rel=\"noopener noreferrer\">\n              <MDBIcon fab icon=\"github\" />\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nfunction ContactUs(props) {\n  const profiles = [\n    {\n      name: \"Glen Jones\",\n      title: \"Software Engineer\",\n      portfolio: \"https://www.glenjones.com.au/\",\n      linkedin: \"https://www.linkedin.com/in/mrglenjones/\",\n      github: \"https://github.com/mistergjones\",\n    },\n    {\n      name: \"Peter Hristakos\",\n      title: \"Software Engineer\",\n      portfolio: \"http://peter-hristakos.surge.sh/\",\n      linkedin: \"https://www.linkedin.com/in/peter-hristakos/\",\n      github: \"https://github.com/Hristakos\",\n    },\n    {\n      name: \"Shailesh Karki\",\n      title: \"Software Engineer\",\n      portfolio: \"http://shaileshkarki.surge.sh/\",\n      linkedin: \"https://www.linkedin.com/in/shaileshkarki/\",\n      github: \"https://github.com/shaileshkarki\",\n    },\n  ];\n  return (\n    <div>\n      <h1>Contact Us</h1>\n      <center>\n        <div className=\"borderForm\">\n          <h1>We'd love to hear from you</h1>\n          <p>\n            If you have a question about features or working of this website, or\n            would to like see other projects done by us, please click on links\n            below to our personal Github pages.\n          </p>\n        </div>\n      </center>\n      <section className=\"our-team padding-lg\">\n        <div className=\"container\">\n          <div className=\"row\">\n            {profiles.map((profile, index) => (\n              <Profile key={index} profile={profile} />\n            ))}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default ContactUs;\n","import { createContext, useContext } from \"react\";\n\nexport const AuthContext = createContext();\n\nexport function useAuth() {\n  return useContext(AuthContext);\n}\n","// import React from \"react\";\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { MDBRow, MDBCol, MDBInput, MDBBtn } from \"mdbreact\";\nimport { Button } from \"react-bootstrap\";\nimport { useAuth } from \"../context/auth\";\nimport {\n  displayInvalid,\n  displayValid,\n  invalidEmailMsg,\n  invalidMinMaxMsg,\n} from \"../lib/formValidation\";\n\nfunction Login(props) {\n  const [isLoggedIn, setLoggedIn] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const { setAuthTokens } = useAuth();\n\n  let referer;\n  if (props.location.state !== null) {\n    referer = props.location.state.referer;\n  } else {\n    referer = \"/\";\n  }\n\n  const passwordMinLength = 6;\n  const passwordMaxLength = 20;\n\n  const handleEmailChange = (e) => {\n    setEmail(e.target.value);\n  };\n\n  const handlePasswordChange = (e) => {\n    setPassword(e.target.value);\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const result = await axios.post(\"/users/login\", {\n        user: {\n          email,\n          password,\n        },\n      });\n      // console.log(result.data[0].email);\n      if (result.data[0].email === email) {\n        setAuthTokens(result.data[0]);\n        setLoggedIn(true);\n      } else {\n        setIsError(true);\n        alert(result.data);\n      }\n    } catch (e) {\n      setIsError(true);\n    }\n  };\n  // console.log(\"AuthTokens\", authTokens);\n  if (isLoggedIn) {\n    return <Redirect to={referer} />;\n  }\n  return (\n    <div>\n      <MDBRow center>\n        <MDBCol sm=\"12\" md=\"6\" lg=\"5\" xl=\"5\" className=\"grey-text\">\n          <form\n            onSubmit={handleSubmit}\n            className=\"staff-new-form border border-light p-5\"\n          >\n            <p className=\"text-center h4  mb-4\">Sign in</p>\n            <div>\n              <MDBInput\n                label=\"Your email\"\n                icon=\"envelope\"\n                group\n                type=\"email\"\n                validate\n                error=\"wrong\"\n                success=\"right\"\n                required\n                name=\"email\"\n                onChange={handleEmailChange}\n                minLength=\"8\"\n                maxLength=\"50\"\n                onInvalid={invalidEmailMsg}\n                onInput={invalidEmailMsg}\n                value={email}\n                pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\"\n              />\n              <MDBInput\n                label=\"Your password\"\n                icon=\"lock\"\n                required\n                group\n                type=\"password\"\n                validate\n                name=\"password\"\n                onChange={handlePasswordChange}\n                minLength={passwordMinLength}\n                maxLength={passwordMaxLength}\n                onInvalid={(e) =>\n                  invalidMinMaxMsg(e, passwordMinLength, passwordMaxLength)\n                }\n                onInput={(e) =>\n                  invalidMinMaxMsg(e, passwordMinLength, passwordMaxLength)\n                }\n                value={password}\n              />\n            </div>\n            <div className=\"text-center\">\n              <Button\n                type=\"submit\"\n                value=\"Submit\"\n                className=\"btn btn-info my-4 btn-block\"\n              >\n                Login\n              </Button>\n            </div>\n          </form>\n          {/* {isError && <p>The username or password provided were incorrect!</p>} */}\n        </MDBCol>\n      </MDBRow>\n    </div>\n  );\n}\n\nexport default Login;\n","import React from \"react\";\nimport { MDBRow, MDBCol, MDBInput, MDBBtn } from \"mdbreact\";\nclass About extends React.Component {\n  render() {\n    return (\n      <MDBRow center>\n        <MDBCol sm=\"12\" md=\"8\">\n          <div className=\"border border-light p-5 md-6\">\n            <div>\n              <h1>Features for the users. </h1>\n\n              <p>\n                It allows a user to register, login and search their shifts{\" \"}\n              </p>\n              <p>Allows user to put in availability for upcoming roster</p>\n              <p>\n                Allows rostering manager to create roster allocating shifts to\n                staff\n              </p>\n            </div>\n            <div>\n              <h1>Features about the application:</h1>\n\n              <p>\n                Technologis used: Javascript,React, CSS/HTML, Node, Express and\n                Postgres SQL\n              </p>\n              <p>Passwords are hashed prior before database storing.</p>\n              <p>Axios utilsed for processing RESTFUL API requests</p>\n              <p>MDB utilised for GUI</p>\n            </div>\n          </div>\n        </MDBCol>\n      </MDBRow>\n    );\n  }\n}\n\nexport default About;\n","import React from \"react\";\nimport { Jumbotron, Row, Col, Image, Button } from \"react-bootstrap\";\n\nclass Home extends React.Component {\n    render() {\n        return (\n            <div class=\"text-left\">\n                <Jumbotron>\n                    <h2>Welcome to Roster Application</h2>\n                    <p>\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit,\n                        sed do eiusmod tempor incididunt ut labore et dolore\n                        magna aliqua. Ut enim ad minim veniam, quis nostrud\n                        exercitation ullamco laboris nisi ut aliquip ex ea\n                        commodo consequat. Duis aute irure dolor in\n                        reprehenderit in voluptate velit esse cillum dolore eu\n                        fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n                        non proident, sunt in culpa qui officia deserunt mollit\n                        anim id est laborum.\n                    </p>\n                </Jumbotron>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React, { useContext } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport {\n  MDBRow,\n  MDBCol,\n  MDBDropdown,\n  MDBDropdownToggle,\n  MDBDropdownMenu,\n  MDBDropdownItem,\n} from \"mdbreact\";\nimport { useAuth } from \"../context/auth\";\n\nfunction LeftSidebar(props) {\n  const { authTokens } = useAuth();\n  return (\n    <MDBRow center className=\"m-1\">\n      {authTokens != null &&\n      (authTokens.role.includes(\"Manager\") ||\n        authTokens.role.includes(\"Supervisor\")) ? (\n        <>\n          <MDBCol sm=\"6\" md=\"3\" lg=\"2\" xl=\"2\">\n            <MDBDropdown>\n              <MDBDropdownToggle caret color=\"secondary\">\n                Roster Menu\n              </MDBDropdownToggle>\n              <MDBDropdownMenu color=\"secondary\" basic>\n                <MDBDropdownItem href=\"/ViewRosterScreen\">\n                  View Roster\n                </MDBDropdownItem>\n                <MDBDropdownItem divider />\n                <MDBDropdownItem href=\"/CreateRosterScreen\">\n                  Create Roster\n                </MDBDropdownItem>\n                <MDBDropdownItem divider />\n                <MDBDropdownItem href=\"/ViewRosterScreen2\">\n                  Edit Roster\n                </MDBDropdownItem>\n                {/* <MDBDropdownItem href=\"\">Delete Roster</MDBDropdownItem> */}\n              </MDBDropdownMenu>\n            </MDBDropdown>\n          </MDBCol>\n          <MDBCol sm=\"6\" md=\"3\" lg=\"2\" xl=\"2\">\n            <MDBDropdown>\n              <MDBDropdownToggle caret color=\"secondary\">\n                User Menu\n              </MDBDropdownToggle>\n              <MDBDropdownMenu basic>\n                <MDBDropdownItem href=\"/StaffListScreen\">\n                  View Staffs\n                </MDBDropdownItem>\n                <MDBDropdownItem divider />\n                <MDBDropdownItem href=\"/StaffNewScreen\">\n                  Add New Staff\n                </MDBDropdownItem>\n                <MDBDropdownItem divider />\n                <MDBDropdownItem href=\"/ViewGroups\">View Roles</MDBDropdownItem>\n                <MDBDropdownItem divider />\n                <MDBDropdownItem href=\"/createGroup\">\n                  Create New Role\n                </MDBDropdownItem>\n              </MDBDropdownMenu>\n            </MDBDropdown>\n          </MDBCol>\n          <MDBCol sm=\"6\" md=\"3\" lg=\"2\" xl=\"2\">\n            <MDBDropdown>\n              <MDBDropdownToggle caret color=\"secondary\">\n                WAGE & OTHERS\n              </MDBDropdownToggle>\n              <MDBDropdownMenu basic>\n                <MDBDropdownItem href=\"/wages\">\n                  View Wage Report\n                </MDBDropdownItem>\n                <MDBDropdownItem divider />\n                <MDBDropdownItem href=\"/PublicHolidays\">\n                  View Public Holidays\n                </MDBDropdownItem>\n                {/* <MDBDropdownItem href=\"\">Edit Roster</MDBDropdownItem>\n                <MDBDropdownItem href=\"\">Delete Roster</MDBDropdownItem> */}\n              </MDBDropdownMenu>\n            </MDBDropdown>\n          </MDBCol>\n        </>\n      ) : (\n        <>\n          <MDBCol sm=\"6\" md=\"3\" lg=\"2\" xl=\"2\">\n            <Button\n              className=\"w-100 h-100 d-inline-block m-1\"\n              variant=\"primary\"\n              href=\"/ViewRosterScreen\"\n            >\n              View Roster\n            </Button>\n          </MDBCol>\n          <MDBCol sm=\"6\" md=\"3\" lg=\"2\" xl=\"2\">\n            <Button\n              className=\"w-100 h-100 d-inline-block m-1\"\n              variant=\"danger\"\n              href=\"/wages\"\n            >\n              View Wage Reports\n            </Button>\n          </MDBCol>\n          <MDBCol sm=\"6\" md=\"3\" lg=\"2\" xl=\"2\">\n            <Button\n              className=\"w-100 h-100 d-inline-block m-1\"\n              variant=\"danger\"\n              href=\"/PublicHolidays\"\n            >\n              Public Holidays\n            </Button>\n          </MDBCol>\n        </>\n      )}\n    </MDBRow>\n  );\n}\n\nexport default LeftSidebar;\n","import React, { useEffect, useState } from \"react\";\nimport useStaffApi from \"../hooks/useStaffApi\";\nimport { MDBRow, MDBCol } from \"mdbreact\";\nimport PaginationTable from \"rbtpagination\";\nimport { Button } from \"react-bootstrap\";\n\nimport \"../../node_modules/rbtpagination/dist/index.css\";\nimport LeftSidebar from \"./LeftSidebar\";\n\nconst searchByCriteraiList = [\n  { label: \"ID\", key: \"staff_id\" },\n  { label: \"First Name\", key: \"firstname\" },\n  { label: \"Last Name\", key: \"lastname\" },\n  { label: \"Address\", key: \"address\" },\n  { label: \"City\", key: \"city\" },\n  { label: \"State\", key: \"state\" },\n  { label: \"Post Code\", key: \"postcode\" },\n  { label: \"Email\", key: \"email\" },\n  { label: \"Phone\", key: \"phone_number\" },\n];\n\nconst tableColumnsAndDataKeys = [\n  { label: \"ID\", key: \"staff_id\" },\n  { label: \"First Name\", key: \"firstname\" },\n  { label: \"Last Name\", key: \"lastname\" },\n  { label: \"Address\", key: \"address\" },\n  { label: \"City\", key: \"city\" },\n  { label: \"State\", key: \"state\" },\n  { label: \"Post Code\", key: \"postcode\" },\n  { label: \"Email\", key: \"email\" },\n  { label: \"Phone\", key: \"phone_number\" },\n  { label: \"Photo\", key: \"photo\" },\n  { label: \"Roles\", key: \"roles\" },\n];\nfunction StaffListScreen(props) {\n  const { data, request: getAllActiveStaffList } = useStaffApi();\n  // All staff from database\n\n  useEffect(() => {\n    getAllActiveStaffList();\n  }, []);\n\n  return (\n    <div>\n      <MDBRow center>\n        <MDBCol sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n          <LeftSidebar />\n        </MDBCol>\n      </MDBRow>\n      <PaginationTable\n        dataSet={data}\n        searchData={searchByCriteraiList}\n        tableData={tableColumnsAndDataKeys}\n        handleItemClick={true}\n        itemClickRedirect=\"/StaffEditScreen\"\n        itemsPerPage={20}\n      />\n\n      <MDBRow className=\"button-panel\">\n        <MDBCol>\n          <Button href=\"/StaffNewScreen\" block>\n            Create New Staff\n          </Button>\n        </MDBCol>\n        <MDBCol>\n          <Button href=\"/admin\" block>\n            Back\n          </Button>\n        </MDBCol>\n      </MDBRow>\n    </div>\n  );\n}\n\nexport default StaffListScreen;\n","import { useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function useStaffApi() {\n  const [data, setData] = useState([]);\n\n  const request = async () => {\n    const response = await axios.get(\"/staff/withroles\");\n\n    setData(response.data);\n    return response;\n  };\n\n  return {\n    data,\n    request,\n  };\n}\n","import { useState } from \"react\";\nimport axios from \"axios\";\n\nexport default function useApi(api) {\n  const [data, setData] = useState([]);\n\n  const request = async () => {\n    const response = await axios.get(api);\n\n    setData(response.data);\n    return response;\n  };\n\n  return {\n    data,\n    request,\n  };\n}\n","import React, { useState, useEffect } from \"react\";\nimport { MDBRow, MDBCol, MDBInput } from \"mdbreact\";\nimport \"./StaffNewScreen.css\";\nimport { Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport useApi from \"../hooks/useApi\";\n\nimport {\n  invalidEmailMsg,\n  invalidMinMaxMsg,\n  invalidNumber,\n} from \"../lib/formValidation\";\n\nfunction StaffForm({ data }) {\n  const [staffId] = useState(data ? data.staff_id : \"\");\n  const [firstname, setFirstName] = useState(data ? data.firstname : \"\");\n  const [lastname, setLastName] = useState(data ? data.lastname : \"\");\n  const [address, setAddress] = useState(data ? data.address : \"\");\n  const [city, setCity] = useState(data ? data.city : \"\");\n  const [state, setState] = useState(data ? data.state : \"\");\n  const [postCode, setPostCode] = useState(data ? data.postcode : \"\");\n  const [email, setEmail] = useState(data ? data.email : \"\");\n  const [phone, setPhone] = useState(data ? data.phone_number : \"\");\n  const [roles, setRoles] = useState([]);\n\n  const { data: groups, request: getAllGroups } = useApi(\"/groups\");\n  const { data: staffRoles, request: getStaffRoles } = useApi(\n    `/staff/assignedroles/${staffId}`\n  );\n\n  const loadGroups = async () => {\n    let groups = await getAllGroups();\n    let roles = { data: [] };\n    if (staffId !== \"\") {\n      roles = await getStaffRoles();\n    }\n    for (let i = 0; i < groups.data.length; i++) {\n      for (let x = 0; x < roles.data.length; x++) {\n        if (roles.data[x].staff_role_id === groups.data[i].id) {\n          groups.data[i].checked = true;\n        }\n      }\n    }\n    setRoles(groups.data);\n  };\n  useEffect(() => {\n    loadGroups();\n  }, []);\n\n  let history = useHistory();\n\n  const handleFirstNameChange = (e) => {\n    setFirstName(e.target.value);\n  };\n  const handleLastNameChange = (e) => {\n    setLastName(e.target.value);\n  };\n  const handleAddressChange = (e) => {\n    setAddress(e.target.value);\n  };\n  const handleCityChange = (e) => {\n    setCity(e.target.value);\n  };\n  const handleStateChange = (e) => {\n    setState(e.target.value);\n  };\n  const handlePostCodeChange = (e) => {\n    setPostCode(e.target.value);\n  };\n\n  const handleEmailChange = (e) => {\n    setEmail(e.target.value.toLowerCase());\n  };\n\n  const handlePhoneChange = (e) => {\n    setPhone(e.target.value);\n  };\n\n  const handleRemoveStaff = async (e) => {\n    console.log(\"Delete\");\n\n    const response = await axios.put(`/staff/remove/${staffId}`, {\n      removedStaffMember: {\n        staffId,\n        firstname,\n        lastname,\n        address,\n        city,\n        state,\n        postCode,\n        email,\n        phone,\n        isActive: false,\n      },\n    });\n    console.log(response.status);\n    if (response.status === 200) {\n      console.log(response.statusText);\n      history.replace(\"/StaffListScreen\");\n    } else {\n      alert(response.statusText);\n    }\n  };\n  const handleUpdateSubmit = async (e) => {\n    e.preventDefault();\n\n    const isEmailOk = await axios.get(`/staff/email/${email}/${staffId}`);\n\n    if (isEmailOk.data === false) {\n      alert(email + \" already exists\");\n      return;\n    }\n    let hasRole = false;\n    let assignedRoles = [];\n    groups.forEach((group) => {\n      console.log(\n        \"update groups = \" + group.title + \" checked = \" + group.checked\n      );\n    });\n\n    for (let i = 0; i < groups.length; i++) {\n      if (groups[i].checked) {\n        hasRole = true;\n        assignedRoles.push(groups[i]);\n      }\n    }\n    if (!hasRole) {\n      return;\n    }\n    const response = await axios.put(`/staff/${staffId}`, {\n      updatedStaffMember: {\n        staffId,\n        firstname,\n        lastname,\n        address,\n        city,\n        state,\n        postCode,\n        email,\n        phone,\n        roles: assignedRoles,\n      },\n    });\n    console.log(response.status);\n    if (response.status === 200) {\n      console.log(response.statusText);\n      history.replace(\"/StaffListScreen\");\n    } else {\n      alert(response.statusText);\n    }\n  };\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Check for unique email.\n    const isEmailUnique = await axios.get(`/staff/email/${email}`);\n\n    if (isEmailUnique.data === false) {\n      alert(email + \" already exists\");\n      return;\n    }\n\n    groups.forEach((group) => {\n      console.log(\n        \"submit groups = \" + group.title + \" checked = \" + group.checked\n      );\n    });\n    let hasRole = false;\n    let assignedRoles = [];\n    for (let i = 0; i < groups.length; i++) {\n      if (groups[i].checked) {\n        hasRole = true;\n        assignedRoles.push(groups[i]);\n      }\n    }\n    if (!hasRole) {\n      return;\n    }\n    // debugger;\n\n    try {\n      const response = await axios.post(\"/staff\", {\n        newStaffMember: {\n          firstname,\n          lastname,\n          address,\n          city,\n          state,\n          postCode,\n          email,\n          phone,\n          isActive: true,\n          roles: assignedRoles,\n        },\n      });\n      if (response.status === 200) {\n        console.log(response.statusText);\n        history.replace(\"/StaffListScreen\");\n      }\n    } catch (error) {\n      alert(`${error.response.statusText} \\n${error}\\n${error.response.data}`);\n    }\n  };\n\n  return (\n    <div>\n      <MDBRow center>\n        <MDBCol sm=\"12\" md=\"9\" lg=\"7\" className=\"grey-text\">\n          <form\n            className=\"staff-new-form border border-light\"\n            onSubmit={data ? handleUpdateSubmit : handleSubmit}\n          >\n            <p className=\"h5 text-center \">\n              {data ? \"Edit Staff\" : \"Add New Staff\"}\n            </p>\n            <div>\n              <MDBRow center>\n                <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                  {roles.map((group, index) => (\n                    <div key={index} className=\"custom-control custom-checkbox\">\n                      <input\n                        type=\"checkbox\"\n                        className=\"custom-control-input\"\n                        defaultChecked={group.checked}\n                        id={`${group.id}`}\n                        onChange={() => {\n                          let newRoles = [...roles];\n                          for (let i = 0; i < newRoles.length; i++) {\n                            if (newRoles[i].id === group.id) {\n                              newRoles[i].checked = newRoles[i].checked\n                                ? false\n                                : true;\n                              console.log(\n                                \"role = \" +\n                                  group.title +\n                                  \"checked = \" +\n                                  newRoles[i].checked\n                              );\n\n                              break;\n                            }\n                          }\n                          setRoles([...newRoles]);\n                        }}\n                      />\n                      <label\n                        className=\"custom-control-label\"\n                        htmlFor={`${group.id}`}\n                      >\n                        {group.title}\n                      </label>\n                    </div>\n                  ))}\n                </MDBCol>\n              </MDBRow>\n            </div>\n            <div className=\"grey-text\">\n              <MDBRow center>\n                <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                  <MDBInput\n                    size=\"lg\"\n                    label=\"First Name\"\n                    icon=\"user-circle\"\n                    group\n                    type=\"text\"\n                    validate\n                    error=\"wrong\"\n                    success=\"right\"\n                    required\n                    name=\"firstname\"\n                    minLength=\"2\"\n                    maxLength=\"20\"\n                    onChange={handleFirstNameChange}\n                    onInvalid={(e) => invalidMinMaxMsg(e, 2, 20)}\n                    onInput={(e) => invalidMinMaxMsg(e, 2, 20)}\n                    autoComplete=\"new-password\"\n                    value={firstname}\n                  />\n                </MDBCol>\n              </MDBRow>\n              <MDBRow center>\n                <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                  <MDBInput\n                    size=\"lg\"\n                    label=\"Last Name\"\n                    icon=\"user-circle\"\n                    group\n                    type=\"text\"\n                    validate\n                    error=\"wrong\"\n                    success=\"right\"\n                    required\n                    name=\"lastname\"\n                    minLength=\"2\"\n                    maxLength=\"20\"\n                    onChange={handleLastNameChange}\n                    onInvalid={(e) => invalidMinMaxMsg(e, 2, 20)}\n                    onInput={(e) => invalidMinMaxMsg(e, 2, 20)}\n                    autoComplete=\"new-password\"\n                    value={lastname}\n                  />\n                </MDBCol>\n              </MDBRow>\n\n              <MDBRow center>\n                <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                  <MDBInput\n                    size=\"lg\"\n                    label=\"Address\"\n                    icon=\"address-card\"\n                    group\n                    type=\"text\"\n                    validate\n                    error=\"wrong\"\n                    success=\"right\"\n                    required\n                    name=\"address\"\n                    minLength=\"3\"\n                    maxLength=\"50\"\n                    onChange={handleAddressChange}\n                    onInvalid={(e) => invalidMinMaxMsg(e, 3, 50)}\n                    onInput={(e) => invalidMinMaxMsg(e, 3, 50)}\n                    autoComplete=\"new-password\"\n                    value={address}\n                  />\n                </MDBCol>\n              </MDBRow>\n              <MDBRow center>\n                <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                  <MDBInput\n                    size=\"lg\"\n                    label=\"City\"\n                    icon=\"map\"\n                    group\n                    type=\"text\"\n                    validate\n                    error=\"wrong\"\n                    success=\"right\"\n                    required\n                    name=\"city\"\n                    minLength=\"3\"\n                    maxLength=\"20\"\n                    onChange={handleCityChange}\n                    onInvalid={(e) => invalidMinMaxMsg(e, 3, 20)}\n                    onInput={(e) => invalidMinMaxMsg(e, 3, 20)}\n                    autoComplete=\"new-password\"\n                    value={city}\n                  />\n                </MDBCol>\n              </MDBRow>\n              <MDBRow center>\n                <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                  <MDBInput\n                    size=\"lg\"\n                    label=\"State\"\n                    icon=\"location-arrow\"\n                    group\n                    type=\"text\"\n                    validate\n                    error=\"wrong\"\n                    success=\"right\"\n                    required\n                    name=\"state\"\n                    minLength=\"3\"\n                    maxLength=\"3\"\n                    onChange={handleStateChange}\n                    onInvalid={(e) => invalidMinMaxMsg(e, 3, 20)}\n                    onInput={(e) => invalidMinMaxMsg(e, 3, 20)}\n                    autoComplete=\"new-password\"\n                    value={state}\n                  />\n                </MDBCol>\n              </MDBRow>\n              <MDBRow center>\n                <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                  <MDBInput\n                    size=\"lg\"\n                    label=\"Post Code\"\n                    icon=\"map-signs\"\n                    group\n                    type=\"text\"\n                    validate\n                    error=\"wrong\"\n                    success=\"right\"\n                    required\n                    name=\"postcode\"\n                    minLength=\"4\"\n                    maxLength=\"4\"\n                    onChange={handlePostCodeChange}\n                    onInvalid={(e) => invalidNumber(e, 4, 4)}\n                    onInput={(e) => invalidNumber(e, 4, 4)}\n                    autoComplete=\"new-password\"\n                    value={postCode}\n                  />\n                </MDBCol>\n              </MDBRow>\n\n              <MDBRow center>\n                <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                  <MDBInput\n                    size=\"lg\"\n                    label=\"Email\"\n                    icon=\"envelope\"\n                    group\n                    type=\"email\"\n                    validate\n                    error=\"wrong\"\n                    success=\"right\"\n                    required\n                    name=\"email\"\n                    onChange={handleEmailChange}\n                    minLength=\"3\"\n                    maxLength=\"50\"\n                    onInvalid={invalidEmailMsg}\n                    onInput={invalidEmailMsg}\n                    autoComplete=\"new-password\"\n                    pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\"\n                    value={email}\n                  />\n                </MDBCol>\n              </MDBRow>\n              <MDBRow center>\n                <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                  <MDBInput\n                    size=\"lg\"\n                    label=\"Phone\"\n                    icon=\"phone\"\n                    group\n                    type=\"text\"\n                    validate\n                    error=\"wrong\"\n                    success=\"right\"\n                    required\n                    minLength=\"10\"\n                    maxLength=\"10\"\n                    name=\"phone\"\n                    onChange={handlePhoneChange}\n                    onInvalid={(e) => invalidNumber(e, 10, 10)}\n                    onInput={(e) => invalidNumber(e, 10, 10)}\n                    autoComplete=\"old-password\"\n                    value={phone}\n                  />\n                </MDBCol>\n              </MDBRow>\n              <MDBCol>\n                <input style={{ display: \"none\" }} type=\"label\" name=\"email2\" />\n              </MDBCol>\n            </div>\n            {\n              <MDBRow center>\n                <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                  <Button\n                    type=\"submit\"\n                    value=\"Submit\"\n                    className=\"btn btn-primary my-3 btn-block mr-2\"\n                  >\n                    {data ? \"Update Staff\" : \"Create New Staff\"}\n                  </Button>\n                </MDBCol>\n                {/* <button className=\"btn btn-primary my-4 btn-block\" type=\"submit\">\n            {data ? \"Update Staff\" : \"Create New Staff\"}\n            {/* </Button> */}\n                {/* </button> */}\n                {data ? (\n                  <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                    <Button\n                      value=\"Submit\"\n                      className=\"btn btn-danger my-3 btn-block mr-2\"\n                      onClick={handleRemoveStaff}\n                    >\n                      Remove Staff Memebr\n                    </Button>\n                  </MDBCol>\n                ) : (\n                  \"\"\n                )}\n                <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                  <Button\n                    className=\"btn btn-primary my-3 btn-block\"\n                    href=\"/StaffListScreen\"\n                  >\n                    Back\n                  </Button>\n                </MDBCol>\n              </MDBRow>\n            }\n          </form>\n        </MDBCol>\n      </MDBRow>\n    </div>\n  );\n}\n\nexport default StaffForm;\n","import React, { useState } from \"react\";\nimport { MDBContainer } from \"mdbreact\";\nimport \"./StaffNewScreen.css\";\nimport StaffForm from \"./StaffForm\";\n\nfunction StaffNewScreen(props) {\n  return (\n    <div>\n      <StaffForm />\n    </div>\n  );\n}\n\nexport default StaffNewScreen;\n","import React from \"react\";\nimport { MDBContainer } from \"mdbreact\";\nimport \"./StaffNewScreen.css\";\nimport StaffForm from \"./StaffForm\";\n\nfunction StaffEditScreen({ location }) {\n  return (\n    <div>\n      <StaffForm data={location.state} />\n    </div>\n  );\n}\n\nexport default StaffEditScreen;\n","import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\n\nclass ReportsFooter extends React.Component {\n    render() {\n        return (\n            <footer class=\"reportBackgroundColor container-fluid text-center\">\n                <Button className=\"reportButton\"\n                    variant=\"primary\"\n                    size=\"sm\"\n                    href=\"#\"\n                    xs={12}\n                    md={{ span: 2, offset: 1 }}\n                >\n                    Worked Hours Report\n          </Button>\n                <Button className=\"reportButton\"\n                    variant=\"primary\"\n                    size=\"sm\"\n                    href=\"#\"\n                    xs={12}\n                    md={{ span: 2, offset: 1 }}\n                >\n                    Salry Report\n          </Button>\n                <Button className=\"reportButton\"\n                    variant=\"primary\"\n                    size=\"sm\"\n                    href=\"#\"\n                    xs={12}\n                    md={{ span: 2, offset: 1 }\n                    }\n                >\n                    Other Report\n          </Button >\n\n            </footer >\n        );\n    }\n}\n\nexport default ReportsFooter;\n\n","import React from \"react\";\n\nclass MiddleContainer extends React.Component {\n    render() {\n        return (\n            <div class=\"col-sm-8 text-left\">\n                <h1>PLACE MAIN SCREEN HERE</h1>\n                <p>This is where the main action will occur</p>\n            </div>\n        );\n    }\n}\n\nexport default MiddleContainer;\n","import React from \"react\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport LeftSidebar from \"./LeftSidebar\";\nimport ReportsFooter from \"./ReportsFooter\";\nimport MiddleContainer from \"./MiddleContainer\";\nimport { MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\nfunction AdminPanel(props) {\n  return (\n    <div>\n      <MDBRow center>\n        <MDBCol>\n          <LeftSidebar />\n        </MDBCol>\n      </MDBRow>\n      <MDBRow>\n        <MDBCol></MDBCol>\n      </MDBRow>\n    </div>\n  );\n}\n\nexport default AdminPanel;\n","import React, { Component } from 'react';\nimport { MDBCol, MDBContainer, MDBRow, MDBFooter } from \"mdbreact\";\nclass Footer extends Component {\n    render() {\n        return (\n            <MDBFooter color=\"blue\" className=\"font-small pt-4 mt-4\">\n                <MDBContainer fluid className=\"text-center text-md-left\">\n                    <MDBRow>\n                        <MDBCol md=\"6\">\n                            <h5 className=\"title\">Footer Content</h5>\n                            <p>\n                                Here you can use rows and columns here to organize your footer\n                                content.\n            </p>\n                        </MDBCol>\n                        <MDBCol md=\"6\">\n                            <h5 className=\"title\">Links</h5>\n                            <ul>\n                                <li className=\"list-unstyled\">\n                                    <a href=\"#!\">Link 1</a>\n                                </li>\n                                <li className=\"list-unstyled\">\n                                    <a href=\"#!\">Link 2</a>\n                                </li>\n                                <li className=\"list-unstyled\">\n                                    <a href=\"#!\">Link 3</a>\n                                </li>\n                                <li className=\"list-unstyled\">\n                                    <a href=\"#!\">Link 4</a>\n                                </li>\n                            </ul>\n                        </MDBCol>\n                    </MDBRow>\n                </MDBContainer>\n                <div className=\"footer-copyright text-center py-3\">\n                    <MDBContainer fluid>\n                        &copy; {new Date().getFullYear()} Copyright: <a href=\"https://www.mdbootstrap.com\"> MDBootstrap.com </a>\n                    </MDBContainer>\n                </div>\n            </MDBFooter>\n        )\n    }\n}\n\nexport default Footer;","import React, { useState, useContext } from \"react\";\nimport {\n  MDBNavbar,\n  MDBNavbarBrand,\n  MDBNavbarNav,\n  MDBNavItem,\n  MDBNavLink,\n  MDBNavbarToggler,\n  MDBCollapse,\n  MDBBtn,\n} from \"mdbreact\";\nimport { useAuth } from \"../context/auth\";\nimport { Redirect } from \"react-router-dom\";\n\nfunction NavbarPage(props) {\n  const [isOpen, setIsOpen] = useState(false);\n  const { authTokens, setAuthTokens } = useAuth();\n  console.log(\"nvbar authContext\", authTokens);\n  function logOut() {\n    setAuthTokens(null);\n    return <Redirect to=\"/\" />;\n  }\n  return (\n    <MDBNavbar color=\"indigo\" dark expand=\"md\">\n      <MDBNavbarBrand>\n        <strong className=\"white-text\">Roster</strong>\n      </MDBNavbarBrand>\n      <MDBNavbarToggler\n        onClick={() => {\n          setIsOpen(!isOpen);\n        }}\n      />\n      <MDBCollapse id=\"navbarCollapse3\" isOpen={isOpen} navbar>\n        <MDBNavbarNav left>\n          <MDBNavItem active>\n            <MDBNavLink exact to=\"/\">\n              Home\n            </MDBNavLink>\n          </MDBNavItem>\n          <MDBNavItem>\n            <MDBNavLink to=\"/about\">About</MDBNavLink>\n          </MDBNavItem>\n          <MDBNavItem>\n            <MDBNavLink to=\"/contact\">Contact Us</MDBNavLink>\n          </MDBNavItem>\n          <MDBNavItem>\n            <MDBNavLink to=\"/admin\">Admin</MDBNavLink>\n          </MDBNavItem>\n        </MDBNavbarNav>\n        <MDBNavbarNav right>\n          {authTokens ? (\n            <>\n              <MDBNavLink to=\"#\">{authTokens.email}</MDBNavLink>{\" \"}\n              <MDBBtn onClick={logOut}>Log out</MDBBtn>\n            </>\n          ) : (\n            <>\n              <MDBNavLink to=\"/register\">Register</MDBNavLink>{\" \"}\n              <MDBNavLink to=\"/login\">Login</MDBNavLink>\n            </>\n          )}\n        </MDBNavbarNav>\n      </MDBCollapse>\n    </MDBNavbar>\n  );\n}\n\nexport default NavbarPage;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport FormErrors from \"./FormErrors\";\nimport { Redirect } from \"react-router-dom\";\nimport {\n  ToastContainer,\n  MDBContainer,\n  MDBRow,\n  MDBCol,\n  MDBInput,\n  MDBBtn,\n} from \"mdbreact\";\nimport { useHistory } from \"react-router-dom\";\n\nimport {\n  displayInvalid,\n  displayValid,\n  invalidEmailMsg,\n  invalidMinMaxMsg,\n} from \"../lib/formValidation\";\n\nfunction Register({}) {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [repassword, setRepassword] = useState(\"\");\n  let history = useHistory();\n  const passwordMinLength = 6;\n  const passwordMaxLength = 20;\n\n  // checks to make sure that the passsword matches.\n  // Not moved to formValidation.js becuase it requires a parameter password\n  const invalidRepasswordMsg = (e, min, max) => {\n    // invalidMinMaxMsg(e, min, max);\n    // debugger;\n    const fieldName = e.target.nextElementSibling.textContent;\n    if (e.target.value === \"\") {\n      e.target.setCustomValidity(`${fieldName} is required`);\n      displayInvalid(e.target, \"red\");\n    } else if (e.target.validity.tooShort) {\n      e.target.setCustomValidity(\n        `${fieldName} needs to be at least ${min} characters long.`\n      );\n      displayInvalid(e.target, \"red\");\n    } else if (e.target.validity.tooLong) {\n      e.target.setCustomValidity(\n        `${fieldName} name needs to be between ${min} and ${max} characters long.`\n      );\n      displayInvalid(e.target, \"red\");\n    } else if (e.target.value !== password) {\n      displayInvalid(e.target, \"red\");\n      e.target.setCustomValidity(\"Password and Re-password did not match\");\n    } else {\n      e.target.setCustomValidity(\"\");\n      displayValid(e.target);\n    }\n\n    return true;\n  };\n\n  const handleEmailChange = (e) => {\n    setEmail(e.target.value);\n  };\n\n  const handlePasswordChange = (e) => {\n    setPassword(e.target.value);\n  };\n\n  const handleRepasswordChange = (e) => {\n    setRepassword(e.target.value);\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(\"/users/register\", {\n        user: {\n          email,\n          password,\n        },\n      });\n      console.log(\"location\");\n      if (response.data === true) {\n        alert(\"user created\");\n        // return <Redirect to=\"/\" />;\n        history.push(\"/\");\n      } else {\n        alert(\"Email already exists\");\n      }\n    } catch (error) {\n      alert(\"Error\", error);\n    }\n  };\n  return (\n    <MDBRow center>\n      <MDBCol sm=\"12\" md=\"6\" lg=\"5\" xl=\"5\" className=\"grey-text\">\n        <form\n          className=\"staff-new-form border border-light p-5\"\n          onSubmit={handleSubmit}\n        >\n          <p className=\"text-center h4 mb-4\">Register</p>\n          <MDBInput\n            label=\"Type your email\"\n            icon=\"envelope\"\n            type=\"email\"\n            validate\n            error=\"wrong\"\n            success=\"right\"\n            required\n            id=\"defaultRegisterFormEmail\"\n            class=\"form-control mb-4\"\n            placeholder=\"E-mail\"\n            name=\"email\"\n            onChange={handleEmailChange}\n            minLength=\"8\"\n            maxLength=\"50\"\n            onInvalid={invalidEmailMsg}\n            onInput={invalidEmailMsg}\n            pattern=\"^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$\"\n            value={email}\n          />\n\n          <MDBInput\n            label=\"Type your password\"\n            icon=\"lock\"\n            type=\"password\"\n            id=\"defaultRegisterFormPassword\"\n            className=\"form-control\"\n            placeholder=\"Password\"\n            aria-describedby=\"defaultRegisterFormPasswordHelpBlock\"\n            validate\n            required\n            name=\"password\"\n            onChange={handlePasswordChange}\n            minLength={passwordMinLength}\n            maxLength={passwordMaxLength}\n            onInvalid={(e) =>\n              invalidMinMaxMsg(e, passwordMinLength, passwordMaxLength)\n            }\n            onInput={(e) =>\n              invalidMinMaxMsg(e, passwordMinLength, passwordMaxLength)\n            }\n            value={password}\n          ></MDBInput>\n          {/* <small\n                        id=\"defaultRegisterFormPasswordHelpBlock\"\n                        class=\"form-text text-muted mb-4\"\n                    >\n                        At least 8 characters and 1 digit\n                    </small> */}\n\n          <MDBInput\n            label=\"Type your re-password\"\n            icon=\"lock\"\n            type=\"password\"\n            id=\"defaultRegisterFormRePassword\"\n            class=\"form-control\"\n            placeholder=\"Re-Password\"\n            aria-describedby=\"defaultRegisterFormPasswordHelpBlock\"\n            validate\n            required\n            name=\"repassword\"\n            onChange={handleRepasswordChange}\n            minLength={passwordMinLength}\n            maxLength={passwordMaxLength}\n            onInvalid={(e) =>\n              invalidRepasswordMsg(e, passwordMinLength, passwordMaxLength)\n            }\n            onInput={(e) =>\n              invalidRepasswordMsg(e, passwordMinLength, passwordMaxLength)\n            }\n            value={repassword}\n          ></MDBInput>\n          <div className=\"text-center\">\n            <button className=\"btn btn-info my-4 btn-block\" type=\"submit\">\n              Register\n            </button>\n\n            <p>or sign up with:(under development)</p>\n\n            <a href=\"#\" class=\"mx-2\" role=\"button\">\n              <i class=\"fab fa-facebook-f light-blue-text\"></i>\n            </a>\n            <a href=\"#\" class=\"mx-2\" role=\"button\">\n              <i class=\"fab fa-twitter light-blue-text\"></i>\n            </a>\n            <a href=\"#\" class=\"mx-2\" role=\"button\">\n              <i class=\"fab fa-linkedin-in light-blue-text\"></i>\n            </a>\n            <a href=\"#\" class=\"mx-2\" role=\"button\">\n              <i class=\"fab fa-github light-blue-text\"></i>\n            </a>\n\n            <hr />\n\n            <p>\n              By clicking\n              <em>Sign up</em> you agree to our\n              <a href=\"\" target=\"_blank\">\n                terms of service\n              </a>\n            </p>\n          </div>\n        </form>\n      </MDBCol>\n    </MDBRow>\n  );\n}\n\nexport default Register;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { MDBContainer, MDBRow, MDBCol, MDBTable } from \"mdbreact\";\nimport LeftSidebar from \"../Components/LeftSidebar.js\";\n\n// import usePublicHolidaysAPI from \"../hooks/usePublicHolidaysAPI\";\nimport PaginationTable from \"rbtpagination\";\nimport useAPI from \"../hooks/useApi\";\nconst searchByCriteraiList = [\n  { label: \"ID\", key: \"phol_id\" },\n  { label: \"State\", key: \"phol_state\" },\n  { label: \"Date\", key: \"phol_date\" },\n  { label: \"Name\", key: \"phol_name\" },\n];\nconst tableColumnsAndDataKeys = [\n  { label: \"ID\", key: \"phol_id\" },\n  { label: \"State\", key: \"phol_state\" },\n  { label: \"Date\", key: \"phol_date\" },\n  { label: \"Name\", key: \"phol_name\" },\n];\nfunction PublicHolidays(props) {\n  //   const { data, request: getAllPublicHolidays } = usePublicHolidaysAPI();\n  const { data, request: getAllPublicHolidays } = useAPI(\n    \"/pubholidays\"\n  );\n  useEffect(() => {\n    // run a query to obtain all public holidays from the database\n    getAllPublicHolidays();\n  }, []);\n\n  // the below code resolves the EPOCH time display issue when we just want to see the YYYY-MM-DD details as opposed to the full string. We basically slice the colum and update each object data record.\n  // start at the first record\n  for (let i = 0; i < data.length; i++) {\n    // obtain just the phol_date\n    var tempDateAdjusted = data[i].phol_date;\n    // assign the frist 10 chars of the timestamp\n    data[i].phol_date = tempDateAdjusted.slice(0, 10);\n    // print out the result to console\n    // console.log(tempDateAdjusted, data[i].phol_date);\n  }\n\n  const handleLoadPublicHolidays = async (e) => {\n    e.preventDefault();\n    const response = await axios.put(`/pubholidays`, {}); //pubholidays\n    console.log(response.status);\n    // if (response.status === 200) {\n    //     console.log(response.statusText);\n    //     history.replace(\"/publicholidays\");\n    // } else {\n    //     alert(response.statusText);\n    // }\n    getAllPublicHolidays();\n  };\n\n  return (\n    <div>\n      <MDBCol sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n        <LeftSidebar />\n      </MDBCol>\n      <button onClick={handleLoadPublicHolidays} className=\"btn btn-primary\">\n        Load Public holidays\n      </button>\n      <PaginationTable\n        dataSet={data}\n        searchData={searchByCriteraiList}\n        tableData={tableColumnsAndDataKeys}\n        handleItemClick={false}\n        itemsPerPage={20}\n      />\n    </div>\n  );\n}\n\nexport default PublicHolidays;\n","import React, { useState } from \"react\";\nimport \"./ShiftDetail.css\";\n\nimport {\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardText,\n  MDBCardHeader,\n  MDBBtn,\n  MDBContainer,\n  MDBCardFooter,\n  MDBDropdown,\n  MDBDropdownToggle,\n  MDBDropdownMenu,\n  MDBDropdownItem,\n  MDBBtnGroup,\n} from \"mdbreact\";\nimport moment from \"moment\";\n\nimport { Button } from \"react-bootstrap\";\n\nfunction ShiftDetail({\n  startTime,\n  endTime,\n  name,\n  handleAllocate,\n  handleDeallocate,\n  handleRemoveShift,\n  handleClose,\n  event,\n  staff,\n  id,\n  shiftId,\n}) {\n  const duration = endTime - startTime;\n  const [staffMember, setStaffMember] = useState(name);\n  const [staffId, setStaffId] = useState(0);\n\n  return (\n    <div className=\"popup\">\n      <div className=\"popup-inner\">\n        <div className=\"popup-wrapper\">\n          <MDBContainer>\n            <MDBCard>\n              <MDBCardHeader color=\"blue lighten-1\">\n                {\" \"}\n                Date {moment(startTime).format(\"dddd, MMMM Do YYYY\")}\n              </MDBCardHeader>\n              <MDBCardBody>\n                <MDBCardTitle>Shift Detail</MDBCardTitle>\n                <div>Name {staffMember}</div>\n\n                <div>{`Start Time: ${moment(startTime).format(\"h:mm a\")}`}</div>\n                <div>{`End Time: : ${moment(endTime).format(\"h:mm a\")}`}</div>\n                <div>{`Duration: ${(duration / 60 / 1000 / 60).toFixed(\n                  2\n                )} hrs`}</div>\n                <div>\n                  <MDBBtnGroup>\n                    <MDBDropdown>\n                      <Button className=\"btn btn-primary mr-0\">\n                        {staffMember}\n                      </Button>\n                      <MDBDropdownToggle caret color=\"primary\" />\n                      <MDBDropdownMenu color=\"primary\">\n                        {staff.map((member, index) => (\n                          <MDBDropdownItem\n                            key={index}\n                            onClick={(e) => {\n                              setStaffMember(member.name);\n                              setStaffId(member.staff_member_id);\n                              console.log(\"member = \", member.name);\n                            }}\n                          >\n                            {member.name}\n                          </MDBDropdownItem>\n                        ))}\n                      </MDBDropdownMenu>\n                    </MDBDropdown>\n                  </MDBBtnGroup>\n                </div>\n              </MDBCardBody>\n              <MDBCardFooter className=\"button-panel\">\n                <Button\n                  className=\"btn btn-green my-3 btn-block mr-2\"\n                  onClick={() =>\n                    handleAllocate(staffMember, id, event, staffId)\n                  }\n                >\n                  Allocate\n                </Button>\n                <Button\n                  className=\"btn btn-danger my-3 btn-block mr-2\"\n                  onClick={() => handleRemoveShift(shiftId)}\n                >\n                  Remove Shift\n                </Button>\n                <Button\n                  className=\"btn btn-danger my-3 btn-block mr-2\"\n                  onClick={() => handleDeallocate(staffMember, id, event)}\n                >\n                  Deallocate\n                </Button>\n                <Button\n                  className=\"btn btn-primary my-3 btn-block mr-2\"\n                  onClick={handleClose}\n                >\n                  close\n                </Button>\n              </MDBCardFooter>\n            </MDBCard>\n          </MDBContainer>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default ShiftDetail;\n","import React, { useState } from \"react\";\nimport \"./ShiftDetail.css\";\n\nimport {\n  MDBCard,\n  MDBCardBody,\n  MDBCardTitle,\n  MDBCardText,\n  MDBCardHeader,\n  MDBBtn,\n  MDBContainer,\n  MDBCardFooter,\n  MDBDropdown,\n  MDBDropdownToggle,\n  MDBDropdownMenu,\n  MDBDropdownItem,\n  MDBBtnGroup,\n} from \"mdbreact\";\nimport moment from \"moment\";\n\nimport { Button } from \"react-bootstrap\";\n\n// const createNext15MinuteTime = () => {\n//   let minutes15 = moment();\n//   minutes15 = Math.round(minutes15.minutes() / 15) * 15;\n//   let newStartTime = moment().minutes(minutes15);\n\n//   // console.log(newStartTime.toLocaleString());\n//   return newStartTime;\n// };\n\nfunction AddShift({\n  groups,\n  handleClose,\n  handleAddItem,\n  weekNumber,\n  items,\n  handleSetAddShift,\n  startDate,\n}) {\n  const [selectedGroup, setSelectedGroup] = useState(groups[0]);\n  const [staffId, setStaffId] = useState(0);\n\n  const createNext15MinuteTime = () => {\n    const now = moment();\n    console.log(\"test\", moment.unix(Math.round(startDate.getTime() / 1000)));\n    let startTime = moment.unix(Math.round(startDate.getTime() / 1000));\n    let rounding = Math.round(now.minutes() / 15) * 15;\n    startTime.hour(now.hour()).minutes(rounding);\n\n    return startTime;\n  };\n\n  const addShift = () => {\n    console.log(\"add shift\");\n    let newItems = [...items];\n    const sortedItems = newItems.sort((a, b) => {\n      return b.id - a.id;\n    });\n    console.log(\"sort id = \" + sortedItems[0].id);\n    let shift = {\n      id: sortedItems[0].id + 1,\n      shift_id: sortedItems[0].id + 1,\n      group: selectedGroup.id,\n      title: \"Unallocated\",\n      weekNumber: weekNumber,\n      start_time: moment.unix(createNext15MinuteTime().unix()),\n      end_time: moment.unix(\n        createNext15MinuteTime()\n          .add(selectedGroup.group_duration, \"hour\")\n          .unix()\n      ),\n      canMove: true,\n      canResize: true,\n      staff_id: 1,\n      isallocated: true,\n    };\n    newItems.push(shift);\n\n    handleAddItem([...newItems]);\n    handleSetAddShift(null);\n  };\n\n  return (\n    <div className=\"popup\">\n      <div className=\"popup-inner\">\n        <div className=\"popup-wrapper\">\n          <MDBContainer>\n            <MDBCard>\n              <MDBCardHeader color=\"blue lighten-1\"> </MDBCardHeader>\n              <MDBCardBody>\n                <MDBCardTitle>Shift Detail</MDBCardTitle>\n                <div>Group </div>\n\n                <div>\n                  <MDBBtnGroup>\n                    <MDBDropdown>\n                      <Button className=\"btn btn-primary mr-0\">\n                        {selectedGroup.title}\n                      </Button>\n                      <MDBDropdownToggle caret color=\"primary\" />\n                      <MDBDropdownMenu color=\"primary\">\n                        {groups.map((group, index) => (\n                          <MDBDropdownItem\n                            key={index}\n                            onClick={(e) => {\n                              setSelectedGroup(group);\n                            }}\n                          >\n                            {group.title}\n                          </MDBDropdownItem>\n                        ))}\n                      </MDBDropdownMenu>\n                    </MDBDropdown>\n                  </MDBBtnGroup>\n                </div>\n              </MDBCardBody>\n              <MDBCardFooter className=\"button-panel\">\n                <Button\n                  className=\"btn btn-green my-3 btn-block mr-2\"\n                  onClick={addShift}\n                >\n                  Add\n                </Button>\n\n                <Button\n                  className=\"btn btn-primary my-3 btn-block mr-2\"\n                  onClick={handleClose}\n                >\n                  close\n                </Button>\n              </MDBCardFooter>\n            </MDBCard>\n          </MDBContainer>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AddShift;\n","import React, { useState, useEffect } from \"react\";\nimport Timeline from \"react-calendar-timeline\";\n// make sure you include the timeline stylesheet or the timeline will not be styled\nimport \"react-calendar-timeline/lib/Timeline.css\";\nimport useApi from \"../../hooks/useApi\";\nimport moment from \"moment\";\nimport useStaffApi from \"../../hooks/useStaffApi\";\nimport ShiftDetail from \"./ShiftDetail\";\n\nimport { Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport AddShift from \"./AddShift\";\n\n// const staff = [\"Peter\", \"Glen\", \"Shailesh\", \"John\"];\n\nconst createNext15MinuteTime = () => {\n  let minutes15 = moment();\n  minutes15 = Math.round(minutes15.minutes() / 15) * 15;\n  let newStartTime = moment().minutes(minutes15);\n\n  // console.log(newStartTime.toLocaleString());\n  return newStartTime;\n};\n\nconst itemStyles = {\n  borderRadius: \"5px\",\n  color: \"red\",\n};\n\nfunction Roster({\n  shifts,\n  groups,\n  weekNumber,\n  create,\n  startDate,\n  endDate,\n  title,\n}) {\n  // const { shifts: groups, request: getAllGroups } = useApi(\n  //   \"/groups\"\n\n  // );\n  console.log(\"^^^^^\", new Date(startDate).toISOString());\n  console.log(\"groups\", groups);\n  console.log(\"start date = \" + startDate + \" end date = \" + endDate);\n  const [items, setItems] = useState(shifts);\n  const [roles, setRoles] = useState(groups);\n  const [rosterWeekNumber, setRosterWeekNumber] = useState(weekNumber);\n  const [shiftDetails, setShiftDetails] = useState(null);\n  const [addShift, setAddShift] = useState(null);\n  const { data: staff, request: getStaff } = useApi(\"/staff/roles\");\n  const [startTime, setStartTime] = useState(new Date(startDate));\n  const [endTime, setEndTime] = useState(moment(endDate).add(24, \"hours\"));\n  let history = useHistory();\n\n  const handleAllocation = (name, id, e, staffId) => {\n    let newItems = [...items];\n\n    // debugger;\n    for (let i = 0; i < newItems.length; i++) {\n      console.log(\"newItems[i].id = \", newItems[i].id);\n      console.log(\"id = \", id);\n      if (newItems[i].id === id) {\n        console.log(newItems[i].title);\n        newItems[i].title = name;\n        console.log(newItems[i].title);\n        console.log((\"selected\", newItems[i].selected));\n        // e.target.textContent = name;\n        newItems[i].staff_id = staffId;\n\n        break;\n      }\n    }\n\n    setShiftDetails(null);\n    setItems([...newItems]);\n  };\n\n  const handleDeallocate = (name, id, e) => {\n    let newItems = [...items];\n\n    for (let i = 0; i < newItems.length; i++) {\n      if (newItems[i].id === id) {\n        console.log(newItems[i].title);\n        newItems[i].title = \"Unallocated\";\n        console.log(newItems[i].title);\n        //e.target.textContent = \"unallocated\";\n        newItems[i].staff_id = \"none\";\n\n        break;\n      }\n    }\n    setShiftDetails(null);\n    setItems([...newItems]);\n  };\n  // All staff from database\n  const handleRemoveShift = (shiftId) => {\n    let newItems = [...items];\n\n    for (let i = 0; i < newItems.length; i++) {\n      if (newItems[i].shift_id === shiftId) {\n        newItems.isallocated = false;\n        newItems.splice(i, 1);\n        break;\n      }\n    }\n    setShiftDetails(null);\n    setItems([...newItems]);\n  };\n\n  const handleAddShift = () => {\n    setAddShift(true);\n  };\n\n  const transformTimes = () => {\n    let transformedData = [...shifts];\n    for (let i = 0; i < shifts.length; i++) {\n      console.log(\n        \"transformedData[i].start_time\",\n        transformedData[i].start_time\n      );\n      transformedData[i].start_time = moment.unix(\n        transformedData[i].start_time\n      );\n      transformedData[i].end_time = moment.unix(transformedData[i].end_time);\n      transformedData[i].id = i + 1;\n    }\n\n    console.log(2);\n    // console.log(\"default items === \", defaultItems);\n    console.log(\"transform items === \", transformedData);\n    setItems(transformedData);\n    console.log(3);\n  };\n\n  console.log(\"items ===\", items);\n\n  useEffect(() => {\n    console.log(1);\n    transformTimes();\n    getStaff();\n\n    // getAllGroups();\n  }, []);\n  {\n    // console.log(\"items ===\", items);\n  }\n  console.log(4);\n  console.log(\"items ===\", items);\n\n  const handleItemResize = (itemId, time, edge) => {\n    console.log(\"resize time = \", time);\n    console.log(\"unix \", moment(time).toLocaleString());\n    const newItems = [...items];\n    newItems.forEach((item) => {\n      const oldStartTime = item.start_time;\n      const oldEndTime = item.end_time;\n      const duration = oldEndTime - oldStartTime;\n      if (item.id === itemId) {\n        if (\n          moment(time).unix() > moment(item.start_time).add(2.75, \"hour\").unix()\n        ) {\n          item.end_time = time;\n          console.log(item.title);\n          console.log(\"duration\", duration / 60 / 1000);\n        } else {\n          alert(\"Minimum shift is 3hrs\");\n        }\n      }\n    });\n    setItems([...newItems]);\n  };\n\n  const handleItemMove = (itemId, time) => {\n    const newItems = [...items];\n    newItems.forEach((item) => {\n      const oldStartTime = item.start_time;\n      const oldEndTime = item.end_time;\n      const duration = oldEndTime - oldStartTime;\n      if (item.id === itemId) {\n        item.start_time = time;\n        item.end_time = time + duration;\n      }\n    });\n    setItems([...newItems]);\n  };\n\n  const handleItemClick = (itemId, e, time) => {\n    // debugger;\n    console.log(\"clicked \", itemId, e, time);\n\n    for (let i = 0; i < items.length; i++) {\n      if (items[i].id === itemId) {\n        console.log(\"Name = \", items[i].title);\n        console.log(\n          \"Start time = \",\n          moment(items[i].start_time).toLocaleString()\n        );\n        console.log(\n          \"Finish time = \",\n          moment(items[i].end_time).toLocaleString()\n        );\n\n        const duration = items[i].end_time - items[i].start_time;\n\n        console.log(\"staff id = \", items[i].staffId);\n        console.log(\"staff = \", staff);\n        console.log(\"duration = \", duration / 60 / 1000 / 60);\n        let filteredStaff = staff.filter((member) => {\n          if (member.staff_role_id === items[i].group) {\n            return member;\n          }\n        });\n        console.log(\"filtered staff\", filteredStaff);\n        setShiftDetails({\n          startTime: items[i].start_time,\n          endTime: items[i].end_time,\n          name: items[i].title,\n          event: e,\n          filteredStaff: filteredStaff,\n          id: items[i].id,\n          shiftId: items[i].shift_id,\n        });\n        return;\n      }\n    }\n  };\n  const handleSubmit = async (e) => {\n    // debugger;\n    e.preventDefault();\n    if (create) {\n      try {\n        const response = await axios.post(\"/roster\", {\n          shifts: items,\n          weekNumber,\n          title,\n          startDate,\n          endDate,\n        });\n        if (response.status === 200) {\n          console.log(response.statusText);\n          history.replace(\"/admin\");\n        }\n      } catch (error) {\n        alert(\n          `${error.response.statusText} \\n${error}\\n${error.response.data}`\n        );\n      }\n    } else {\n      try {\n        const response = await axios.put(\"/roster\", {\n          shifts: items,\n          weekNumber,\n        });\n        if (response.status === 200) {\n          console.log(response.statusText);\n          history.replace(\"/admin\");\n        }\n      } catch (error) {\n        alert(\n          `${error.response.statusText} \\n${error}\\n${error.response.data}`\n        );\n      }\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <h1>Week Number: {rosterWeekNumber}</h1>\n        <h2>Start Date: {startTime.toLocaleDateString()}</h2>\n        <h2>End Date: {new Date(endDate).toLocaleDateString()}</h2>\n      </div>\n      <div className=\"button-panel\">\n        <Button\n          className=\"btn btn-green my-3 btn-block mr-2\"\n          onClick={handleSubmit}\n        >\n          {create ? \"Save Roster\" : \"Update Roster\"}\n        </Button>\n        <Button\n          className=\"btn btn-primary my-3 btn-block mr-2\"\n          onClick={handleAddShift}\n        >\n          Add Shift\n        </Button>\n        <Button href=\"/admin\" className=\"btn btn-primary my-3 btn-block mr-2\">\n          close\n        </Button>\n      </div>\n      <Timeline\n        className=\"timeline\"\n        onItemContextMenu={(id, e, time) => console.log(\"context\", id, e)}\n        groups={roles}\n        items={items}\n        onItemResize={(itemId, time, edge) =>\n          handleItemResize(itemId, time, edge)\n        }\n        defaultTimeStart={startTime}\n        defaultTimeEnd={endTime}\n        lineHeight={100}\n        onItemMove={(itemId, time) => handleItemMove(itemId, time)}\n        onItemClick={(itemId, e, time) => handleItemClick(itemId, e, time)}\n        itemRenderer={({\n          item,\n          timelineContext,\n          itemContext,\n          getItemProps,\n          getResizeProps,\n        }) => {\n          const {\n            left: leftResizeProps,\n            right: rightResizeProps,\n          } = getResizeProps();\n          const backgroundColor = itemContext.selected\n            ? itemContext.dragging\n              ? \"red\"\n              : \"beige\"\n            : itemContext.title.toLowerCase() === \"unallocated\"\n            ? \"red\"\n            : \"green\";\n          const borderColor = itemContext.resizing ? \"red\" : item.color;\n          return (\n            <div\n              {...getItemProps({\n                style: {\n                  backgroundColor,\n                  color: item.color,\n                  // borderColor,\n                  // borderStyle: \"solid\",\n                  // borderWidth: 1,\n                  borderRadius: 4,\n                  borderLeftWidth: itemContext.selected ? 3 : 1,\n                  borderRightWidth: itemContext.selected ? 3 : 1,\n                },\n              })}\n            >\n              {itemContext.useResizeHandle ? (\n                <div {...leftResizeProps} />\n              ) : null}\n\n              <div\n                style={{\n                  height: \"100%\",\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  overflow: \"hidden\",\n                }}\n              >\n                <div\n                  style={{\n                    height: \"100%\",\n                    lineHeight: \"initial\",\n                    textAlign: \"left\",\n                  }}\n                >\n                  Start:\n                  {moment(item.start_time).format(\"h:mm a\")}\n                </div>\n                <div\n                  style={{\n                    height: \"100%\",\n                    lineHeight: \"initial\",\n                  }}\n                >\n                  {itemContext.title}\n                </div>\n                <div\n                  style={{\n                    height: \"100%\",\n                    textAlign: \"left\",\n                    lineHeight: \"initial\",\n                  }}\n                >\n                  End: {moment(item.end_time).format(\"h:mm a\")}\n                </div>\n              </div>\n              {/* <div\n                style={{\n                  height: itemContext.dimensions.height,\n                  overflow: \"hidden\",\n                  paddingLeft: 3,\n                  textOverflow: \"ellipsis\",\n                  whiteSpace: \"nowrap\",\n                }}\n              >\n                {itemContext.title}\n              </div> */}\n\n              {itemContext.useResizeHandle ? (\n                <div {...rightResizeProps} />\n              ) : null}\n            </div>\n          );\n        }}\n        timeSteps={{\n          minute: 30,\n          hour: 1,\n          day: 1,\n          month: 1,\n          year: 1,\n        }}\n      />\n      {shiftDetails && (\n        <ShiftDetail\n          staff={shiftDetails.filteredStaff}\n          startTime={shiftDetails.startTime}\n          endTime={shiftDetails.endTime}\n          handleAllocate={handleAllocation}\n          name={shiftDetails.name}\n          handleDeallocate={handleDeallocate}\n          handleRemoveShift={handleRemoveShift}\n          handleClose={() => {\n            setShiftDetails(null);\n          }}\n          event={shiftDetails.event}\n          id={shiftDetails.id}\n          shiftId={shiftDetails.shiftId}\n        />\n      )}\n      {addShift && (\n        <AddShift\n          groups={roles}\n          handleClose={() => {\n            setAddShift(null);\n          }}\n          handleAddItem={setItems}\n          items={items}\n          handleSetAddShift={setAddShift}\n          weekNumber={weekNumber}\n          startDate={startTime}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default Roster;\n","import React from \"react\";\nimport Roster from \"./Roster\";\nfunction RosterScreen({ location }) {\n  console.log(\"location\", location.state);\n\n  return (\n    <Roster\n      shifts={location.state[0]}\n      groups={location.state[1]}\n      weekNumber={location.state[2]}\n      create={true}\n      startDate={location.state[3]}\n      endDate={location.state[4]}\n      title={location.state[5]}\n    />\n  );\n}\n\nexport default RosterScreen;\n","import React, { useState, useEffect } from \"react\";\nimport { MDBRow, MDBCol, MDBInput, MDBContainer } from \"mdbreact\";\nimport useApi from \"../../hooks/useApi\";\nimport { Button } from \"react-bootstrap\";\n\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  invalidEmailMsg,\n  invalidMinMaxMsg,\n  invalidNumber,\n} from \"../../lib/formValidation\";\n\nimport {\n  DatePicker,\n  TimePicker,\n  DateTimePicker,\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport DateFnsUtils from \"@date-io/date-fns\";\n\nimport moment from \"moment\";\n\nconst colours = [\"red\", \"yellow\", \"blue\", \"green\", \"orange\", \"purple\"];\n\nfunction CreateRosterScreen(props) {\n  const createNext15MinuteTime = () => {\n    console.log(\"test\", moment.unix(Math.round(startDate.getTime() / 1000)));\n    let startTime = moment.unix(Math.round(startDate.getTime() / 1000));\n    let rounding = Math.round(startTime.minutes() / 15) * 15;\n    startTime.minutes(rounding);\n\n    // console.log(newStartTime.toLocaleString());\n    return startTime;\n  };\n  const { data: groups, request: getAllGroups } = useApi(\"/groups\");\n  const { data: weekNumberFromDatabase, request: getWeekNumber } = useApi(\n    \"/roster/weeknumber\"\n  );\n  const [selectedGroup, setSelectedGroup] = useState({});\n  const [numberOfShifts, setNumberOfShifts] = useState([]);\n  const [weekNumber, setWeekNumber] = useState(\n    weekNumberFromDatabase.weekNumber\n  );\n  const [startDate, setStartDate] = useState(new Date());\n  const [endDate, setEndDate] = useState(\n    new Date(new Date().setDate(new Date().getDate() + 6))\n  );\n\n  const [title, setTitle] = useState(weekNumberFromDatabase.weekNumber);\n\n  let history = useHistory();\n\n  useEffect(() => {\n    getAllGroups();\n    getWeekNumber();\n    console.log(weekNumberFromDatabase);\n    let a = moment.unix(1598346000);\n    let b = a.unix();\n    console.log(\"aaa\", a);\n  }, []);\n  console.log(2);\n  console.log(groups);\n\n  const createShifts = (numberOfShifts) => {\n    const groupsWithShifts = Object.keys(numberOfShifts);\n    let shifts = [];\n    groupsWithShifts.forEach((groupName, index) => {\n      const shiftCount = numberOfShifts[groupName];\n      let groupId;\n      let minDuration;\n      console.log(groupName);\n      console.log(groups);\n      for (let j = 0; j < groups.length; j++) {\n        if (groups[j].title === groupName) {\n          groupId = groups[j].id;\n          minDuration = groups[j].group_duration;\n          console.log(\"true condition\");\n          break;\n        }\n      }\n      const itemStyles = {\n        borderRadius: \"5px\",\n      };\n      for (let i = 0; i < shiftCount; i++) {\n        let shift = {\n          id: index + 1,\n          group: groupId,\n          title: \"Unallocated\",\n          weekNumber: weekNumber,\n          start_time: createNext15MinuteTime().add(\"hour\").unix(),\n          end_time: createNext15MinuteTime().add(minDuration, \"hour\").unix(),\n          canMove: true,\n          canResize: true,\n          itemProps: {\n            style: itemStyles,\n          },\n          staff_id: 1,\n          isallocated: true,\n        };\n        shifts.push(shift);\n      }\n    });\n\n    return shifts;\n  };\n  const handleNumberOfShiftChange = (e) => {\n    console.log(e.target.name);\n    let newNumberOfShifts = { ...numberOfShifts };\n    newNumberOfShifts[e.target.name] = e.target.value;\n    setNumberOfShifts(newNumberOfShifts);\n  };\n\n  const handleWeekNumberChange = (e) => {\n    setWeekNumber(e.target.value);\n  };\n  const handleTitleChange = (e) => {\n    setTitle(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (startDate.getTime() >= endDate.getTime()) {\n      return;\n    }\n    let shifts = createShifts(numberOfShifts);\n    console.log(\"shifts = \" + shifts);\n    history.push(\"/ViewRoster\", [\n      shifts,\n      groups,\n      weekNumberFromDatabase.weekNumber,\n      startDate.toISOString().slice(0, 10),\n      endDate.toISOString().slice(0, 10),\n      title,\n    ]);\n    // history.push(\"/ViewRosterScreen\", [...shifts]);\n  };\n  return (\n    <div>\n      {console.log(3)}\n      <p className=\"text-center h4  mb-4\">Create Roster</p>\n      <MDBRow center>\n        <MDBCol sm=\"12\" md=\"6\" lg=\"5\" className=\"grey-text\">\n          <form\n            onSubmit={handleSubmit}\n            className=\"staff-new-form border border-light p-5\"\n          >\n            <MDBRow center>\n              <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                {\" \"}\n                <MDBInput\n                  size=\"lg\"\n                  label={\"Week Number\"}\n                  icon=\"calendar\"\n                  // id={group.group_id}\n                  group\n                  type=\"text\"\n                  validate\n                  error=\"wrong\"\n                  success=\"right\"\n                  required\n                  name={\"weekNumber\"}\n                  minLength=\"1\"\n                  maxLength=\"4\"\n                  onChange={handleWeekNumberChange}\n                  onInvalid={(e) => invalidNumber(e, 1, 2)}\n                  onInput={(e) => invalidNumber(e, 1, 2)}\n                  autoComplete=\"new-password\"\n                  value={weekNumberFromDatabase.weekNumber}\n                  disabled\n                />\n              </MDBCol>\n            </MDBRow>\n            <MDBRow center>\n              <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                {\" \"}\n                <MDBInput\n                  size=\"lg\"\n                  label={\"Title\"}\n                  icon=\"calendar\"\n                  group\n                  type=\"text\"\n                  validate\n                  error=\"wrong\"\n                  success=\"right\"\n                  required\n                  name={\"title\"}\n                  minLength=\"1\"\n                  maxLength=\"50\"\n                  onChange={handleTitleChange}\n                  onInvalid={(e) => invalidMinMaxMsg(e, 1, 50)}\n                  onInput={(e) => invalidMinMaxMsg(e, 1, 50)}\n                  autoComplete=\"new-password\"\n                  value={title}\n                />\n              </MDBCol>\n            </MDBRow>\n            <MDBRow center>\n              <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <DatePicker\n                    value={startDate}\n                    onChange={setStartDate}\n                    format=\"do MMMM yyyy\"\n                    size=\"lg\"\n                    label=\"Start Date\"\n                    required\n                    validate\n                    minDate={new Date()}\n                  />\n                </MuiPickersUtilsProvider>\n              </MDBCol>\n            </MDBRow>\n            <MDBRow center>\n              <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <DatePicker\n                    value={endDate}\n                    onChange={setEndDate}\n                    format=\"do MMMM yyyy\"\n                    size=\"lg\"\n                    label=\"End Date\"\n                    required\n                    validate\n                    minDateMessage=\"End Date should be later than Start Date\"\n                    minDate={new Date(startDate).setDate(\n                      startDate.getDate() + 1\n                    )}\n                  />\n                </MuiPickersUtilsProvider>\n              </MDBCol>\n            </MDBRow>\n            {groups.map((group, index) => (\n              <MDBRow key={index} center>\n                <MDBCol key={index} sm=\"12\" md=\"9\" lg=\"7\">\n                  <MDBInput\n                    size=\"lg\"\n                    className=\"grey-text\"\n                    label={`${group.title} Number Of Shifts`}\n                    icon=\"users\"\n                    // id={group.group_id}\n                    group\n                    type=\"text\"\n                    validate\n                    error=\"wrong\"\n                    success=\"right\"\n                    required\n                    name={group.title}\n                    minLength=\"1\"\n                    maxLength=\"2\"\n                    onChange={handleNumberOfShiftChange}\n                    onInvalid={(e) => invalidNumber(e, 1, 2)}\n                    onInput={(e) => invalidNumber(e, 1, 2)}\n                    autoComplete=\"new-password\"\n                    // value={}\n                  />\n                </MDBCol>\n              </MDBRow>\n            ))}\n\n            <Button\n              type=\"submit\"\n              value=\"Submit\"\n              className=\"btn btn-primary my-3 btn-block mr-2\"\n            >\n              {\"Create Roster\"}\n            </Button>\n            <Button className=\"btn btn-primary my-3 btn-block\" href=\"/admin\">\n              Back\n            </Button>\n          </form>\n        </MDBCol>\n      </MDBRow>\n    </div>\n  );\n}\n\nexport default CreateRosterScreen;\n","import React, { useState, useEffect } from \"react\";\nimport { MDBRow, MDBCol, MDBInput, MDBContainer } from \"mdbreact\";\nimport useApi from \"../../hooks/useApi\";\nimport { Button } from \"react-bootstrap\";\n\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  invalidEmailMsg,\n  invalidMinMaxMsg,\n  invalidNumber,\n} from \"../../lib/formValidation\";\n\nfunction AdminShiftScreen(props) {\n  const { data: groups, request: getAllGroups } = useApi(\"/groups\");\n  const [selectedGroup, setSelectedGroup] = useState({});\n  const [minDuration, setMinDuration] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  let history = useHistory();\n\n  const handleMinDurationChange = (e) => {\n    setMinDuration(e.target.value);\n  };\n  const handleTitleChange = (e) => {\n    setTitle(e.target.value);\n  };\n  useEffect(() => {\n    getAllGroups();\n  }, []);\n\n  const handleSubmit = async (e) => {\n    // debugger;\n    e.preventDefault();\n    if (!selectedGroup.staff_role) {\n      return;\n    }\n\n    try {\n      const response = await axios.post(\"/shift\", {\n        newShift: {\n          minDuration,\n          title,\n          group: selectedGroup,\n        },\n      });\n      if (response.status === 200) {\n        console.log(response.statusText);\n        history.replace(\"/admin\");\n      }\n    } catch (error) {\n      alert(`${error.response.statusText} \\n${error}\\n${error.response.data}`);\n    }\n  };\n\n  return (\n    <div>\n      <MDBRow center>\n        <MDBCol sm=\"12\" md=\"6\" lg=\"5\" xl=\"5\" className=\"grey-text\">\n          <form\n            onSubmit={handleSubmit}\n            className=\"staff-new-form border border-light p-5\"\n          >\n            <p className=\"text-center h4  mb-4\">{\"Shift Screen\"}</p>\n            <div className=\"grey-text\">\n              <MDBInput\n                label=\"Minimum Duration hrs\"\n                icon=\"clock\"\n                group\n                type=\"text\"\n                validate\n                error=\"wrong\"\n                success=\"right\"\n                required\n                name=\"minDuration\"\n                minLength=\"1\"\n                maxLength=\"2\"\n                onChange={handleMinDurationChange}\n                onInvalid={(e) => invalidNumber(e, 1, 2)}\n                onInput={(e) => invalidNumber(e, 1, 2)}\n                autoComplete=\"new-password\"\n                value={minDuration}\n              />\n\n              <MDBInput\n                label=\"Title\"\n                icon=\"tag\"\n                group\n                type=\"text\"\n                validate\n                error=\"wrong\"\n                success=\"right\"\n                required\n                name=\"title\"\n                minLength=\"2\"\n                maxLength=\"20\"\n                onChange={handleTitleChange}\n                onInvalid={(e) => invalidMinMaxMsg(e, 2, 20)}\n                onInput={(e) => invalidMinMaxMsg(e, 2, 20)}\n                autoComplete=\"new-password\"\n                value={title}\n              />\n\n              <div className=\"btn-group staff-new-form\">\n                <button type=\"button\" class=\"btn btn-primary\">\n                  {selectedGroup.staff_role\n                    ? selectedGroup.staff_role\n                    : \"Groups\"}\n                </button>\n                <button\n                  type=\"button\"\n                  class=\"btn btn-primary dropdown-toggle px-3\"\n                  data-toggle=\"dropdown\"\n                  aria-haspopup=\"true\"\n                  aria-expanded=\"false\"\n                >\n                  <span className=\"sr-only\">Toggle Dropdown</span>\n                </button>\n                <div className=\"dropdown-menu staff-new-form\">\n                  {groups.map((group, index) => (\n                    <a\n                      onClick={(e) => {\n                        setSelectedGroup(group);\n                      }}\n                      key={index}\n                      className=\"dropdown-item text-center\"\n                      href=\"#\"\n                    >\n                      {group.staff_role}\n                    </a>\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            <Button\n              type=\"submit\"\n              value=\"Submit\"\n              className=\"btn btn-primary my-3 btn-block mr-2\"\n            >\n              {\"Create New Shift\"}\n            </Button>\n\n            <Button className=\"btn btn-primary my-3 btn-block\" href=\"/admin\">\n              Back\n            </Button>\n          </form>\n        </MDBCol>\n      </MDBRow>\n    </div>\n  );\n}\n\nexport default AdminShiftScreen;\n","// This module will be used to display weekly / monthly / daily wages in a paginated table\nimport React, { useEffect, useState } from \"react\";\nimport useWagesAPI from \"../../hooks/useWagesAPI\";\nimport useStaffApi from \"../../hooks/useStaffApi\";\nimport axios from \"axios\";\nimport { MDBContainer, MDBRow, MDBCol, MDBTable } from \"mdbreact\";\nimport {\n  MDBDropdown,\n  MDBDropdownToggle,\n  MDBDropdownMenu,\n  MDBDropdownItem,\n  MDBBtnGroup,\n} from \"mdbreact\";\nimport { Button } from \"react-bootstrap\";\nimport LeftSidebar from \"../LeftSidebar\";\nimport PaginationTable from \"rbtpagination\";\nimport useAPI from \"../../hooks/useApi.js\";\n\nconst searchByCriteraiList = [\n  { label: \"Roster Week\", key: \"roster_id\" },\n  { label: \"Username\", key: \"username\" },\n  { label: \"Title\", key: \"title\" },\n  { label: \"Hourly Rate\", key: \"pay_rate\" },\n  { label: \"Hours Worked (include break)\", key: \"hours_worked\" },\n  { label: \"Total Pay (include break)\", key: \"total_shift_pay\" },\n];\nconst tableColumnsAndDataKeys = [\n  { label: \"Roster Week\", key: \"roster_id\" },\n  { label: \"Username\", key: \"username\" },\n  { label: \"Title\", key: \"title\" },\n  { label: \"Hourly Rate\", key: \"pay_rate\" },\n  { label: \"Hours Worked (include break)\", key: \"hours_worked\" },\n  { label: \"Total Pay (include break)\", key: \"total_shift_pay\" },\n];\n\nfunction Wages({}) {\n  // const { data, request: getTotalRosterOneWages } = useWagesAPI();\n  // const { data2, request: getSpecificDayWages } = useWagesAPI();\n\n  // obtain the week numbers from the rosters query\n  const { data: rosters, request: getRosters } = useAPI(\"/roster/allRosters\");\n\n  const { data: rosterOneWages, request: getTotalRosterOneWages } = useAPI(\n    \"/wages1\"\n  );\n\n  // obtain the staff usernames for the drop down menu\n  const { data: allUniqueUsernames, request: getAllUsernames } = useAPI(\n    \"/wages1/allusernames\"\n  );\n\n  // the method below simply obtains a list of all the unique roles in our database.was going to use each role as a parameter for reports.\n  const {\n    data: uniqueRoleTitles,\n    request: getTotalRosterOneRoleWages,\n  } = useAPI(\"/wages1/uniqueroles\");\n\n  // the poitn of the below is obtain the dataset that catpures for each roster ID, the person, role and the wages paid out.\n  const {\n    data: allrosterpersontitlewages,\n    request: getEachRosterWeekWagesByEachPersonAndRole,\n  } = useAPI(\"/wages1/eachrosterswagesbyperson\");\n\n  useEffect(() => {\n    // run a query to obtain all results from the query\n    getTotalRosterOneWages();\n    // getSpecificDayWages();\n    getTotalRosterOneRoleWages();\n    getRosters();\n    getEachRosterWeekWagesByEachPersonAndRole();\n    getAllUsernames();\n  }, []);\n\n  // obtain the week number so we can populate the drop down list\n  let weekTitles = [];\n  // map through teh rosters data object and collate all week titles to an array\n  // rosters.map((roster) => {\n  //     weekTitles.push(roster.title);\n  // });\n\n  // obtain the usernames for the drop down box for 3rd report\n  // let uniqueNames = [];\n  // allUniqueUsernames.map((usernames) => {\n  //     uniqueNames.push(usernames);\n  // });\n\n  const handleTotalWagesRosterOne = async (e) => {\n    e.preventDefault();\n    const response = await axios.get(`/wages1`, {});\n    console.log(response.status);\n    // if (response.status === 200) {\n    //     console.log(response.statusText);\n    //     history.replace(\"/admin\");\n    // } else {\n    //     alert(response.statusText);\n    // }\n    // getTotalRosterOneWages();\n  };\n\n  const handleTotalRoleWagesRosterOne = async (e) => {\n    e.preventDefault();\n    const response = await axios.get(`/wages1/uniqueroles`, {});\n    console.log(response.status);\n    // if (response.status === 200) {\n    //     console.log(response.statusText);\n    //     history.replace(\"/admin\");\n    // } else {\n    //     alert(response.statusText);\n    // }\n    // getTotalRosterOneWages();\n  };\n\n  const handlegetGachRosterWeekWagesByEachPersonAndRole = async (e) => {\n    e.preventDefault();\n    const response = await axios.get(`/wages1/eachrosterswagesbyperson`, {});\n    console.log(response.status);\n    // if (response.status === 200) {\n    //     console.log(response.statusText);\n    //     history.replace(\"/admin\");\n    // } else {\n    //     alert(response.statusText);\n    // }\n    // getTotalRosterOneWages();\n  };\n\n  return (\n    <MDBContainer fluid size=\"12\" sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n      <MDBRow center>\n        <MDBCol sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n          <LeftSidebar />\n        </MDBCol>\n      </MDBRow>\n\n      <MDBCol sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n        <h1>Report Wages</h1>\n        <MDBRow center>\n          <MDBDropdown>\n            <Button className=\"btn btn-primary mr-0\">\n              Weekly Wages by Roster\n            </Button>\n            <MDBDropdownToggle caret color=\"primary\" />\n            <MDBDropdownMenu basic>\n              {rosters.map((roster) => (\n                <MDBDropdownItem href={`/viewWeeklyWages/${roster.roster_id}`}>\n                  {roster.title}\n                </MDBDropdownItem>\n              ))}\n            </MDBDropdownMenu>\n          </MDBDropdown>\n          <MDBDropdown>\n            <Button className=\"btn btn-primary mr-0\">\n              Weekly Wages by Job Title\n            </Button>\n            <MDBDropdownToggle caret color=\"primary\" />\n            <MDBDropdownMenu basic>\n              {rosters.map((roster) => (\n                <MDBDropdownItem\n                  href={`/viewWeeklyJobWages/${roster.roster_id}`}\n                >\n                  {roster.title}\n                </MDBDropdownItem>\n              ))}\n            </MDBDropdownMenu>\n          </MDBDropdown>\n          <MDBDropdown>\n            <Button className=\"btn btn-primary mr-0\">\n              Weekly Wages by Staff Member\n            </Button>\n            <MDBDropdownToggle caret color=\"primary\" />\n            <MDBDropdownMenu basic>\n              {allUniqueUsernames.map((usernames) => (\n                <MDBDropdownItem\n                  href={`/viewWeeklyStaffWages/${usernames.username}`}\n                >\n                  {usernames.username}\n                </MDBDropdownItem>\n              ))}\n            </MDBDropdownMenu>\n          </MDBDropdown>\n        </MDBRow>\n      </MDBCol>\n\n      {/* <button\n                onClick={handleTotalWagesRosterOne}\n                className=\"btn btn-primary\"\n            >\n                Load Wages Table\n            </button>\n            <PaginationTable\n                dataSet={rosterOneWages}\n                searchData={searchByCriteraiList}\n                tableData={tableColumnsAndDataKeys}\n                handleItemClick={false}\n                itemsPerPage={20}\n            /> */}\n\n      {/* <button\n                onClick={handleTotalRoleWagesRosterOne}\n                className=\"btn btn-primary\"\n            >\n                Load Role Table\n            </button>\n            <PaginationTable\n                dataSet={uniqueRoleTitles}\n                searchData={searchByCriteraiList}\n                tableData={tableColumnsAndDataKeys}\n                handleItemClick={false}\n                itemsPerPage={20}\n            /> */}\n      {/* <button\n                onClick={handlegetGachRosterWeekWagesByEachPersonAndRole}\n                className=\"btn btn-primary\"\n            >\n                Interactive Data Table Below\n            </button>\n            <PaginationTable\n                dataSet={allrosterpersontitlewages}\n                searchData={searchByCriteraiList}\n                tableData={tableColumnsAndDataKeys}\n                handleItemClick={false}\n                itemsPerPage={40}\n            /> */}\n    </MDBContainer>\n  );\n}\n\nexport default Wages;\n","// GJ: This modules converts unix time to human readable form based on GMT\nconst convertUnixTime = (unixTimeInMilliseconds) => {\n    const milliseconds = unixTimeInMilliseconds * 1000;\n\n    const dateObj = new Date(milliseconds).toUTCString();\n\n    //console.log(dateObj);\n    return dateObj;\n};\n\nexport default convertUnixTime;\n","// GJ: This modules calcualtes the break times depending on the length of shifts\nconst calculateBreak = (rostered_hours) => {\n    // convert to number first\n    const rh = Number(rostered_hours);\n    var breakTime = 0;\n\n    if (rh < 3.5) {\n        return (breakTime = 0);\n    } else if (rh >= 3.5 && rh < 5) {\n        return (breakTime = 0.25);\n    } else if (rh >= 5 && rh < 8) {\n        return (breakTime = 0.5);\n    } else {\n        return (breakTime = 1);\n    }\n};\n\nexport default calculateBreak;\n","// GJ: This modules take the data object from the WEEKLY WAGE SBY ROSTER, and calculates the correct pay\nconst calculatePay = (data) => {\n    // copy the object\n    // var clonedObject = Object.assign({}, data);\n    // console.log(clonedObject);\n\n    // just get a list of the usernames to aggregate hours and pay\n    var temp_uniqueNames = [];\n    var objectLength = Object.keys(data).length;\n    for (var i = 0; i < objectLength; i++) {\n        temp_uniqueNames.push(data[i].username);\n    }\n    // create a unique set that only contains 1 instance of a name\n    var uniqueNames = [...new Set(temp_uniqueNames)];\n\n    // declare some array variables to store the data\n    var temp_rosteredHours = [];\n    var temp_breakTimeHours = [];\n    var temp_actualWorkTimeHours = [];\n    var jt = [];\n    var final_records = [];\n    // for each unique name, loop through the data and take the roster id, usrname, title and calculate the running total of variious variables\n    for (var j = 0; j < uniqueNames.length; j++) {\n        jt = [];\n        for (var i = 0; i < objectLength; i++) {\n            var counter = 0;\n            if (data[i].username === uniqueNames[j]) {\n                if (counter === 0) {\n                    jt.push(data[i].roster_id);\n                    jt.push(data[i].username);\n                    jt.push(data[i].title);\n                    jt.push(Number(data[i].pay_rate));\n                    jt = [...new Set(jt)];\n                }\n                // store each persons various metrics in an array\n                temp_rosteredHours.push(Number(data[i].rostered_hours));\n                temp_breakTimeHours.push(data[i].breakTime);\n                temp_actualWorkTimeHours.push(data[i].actualWorkTime);\n\n                counter += 1;\n            }\n        }\n\n        // now perform reduce to calculate running total of the 3 arrays above\n        var totalRosteredHours = temp_rosteredHours.reduce(\n            (total, currentValue) => {\n                return total + currentValue;\n            },\n            0\n        );\n        // console.log(`temp_rosteredHours`, totalRosteredHours);\n\n        var totalBreakTimeHours = temp_breakTimeHours.reduce(\n            (total, currentValue) => {\n                return total + currentValue;\n            },\n            0\n        );\n        //console.log(`temp_breakTimeHours`, totalBreakTimeHours);\n\n        var totalActualWorkTimeHours = temp_actualWorkTimeHours.reduce(\n            (total, currentValue) => {\n                return total + currentValue;\n            },\n            0\n        );\n        // console.log(`temp_actualWorkTimeHours`, totalActualWorkTimeHours);\n\n        //calculate actual pay_rate\n        var totalPay = (jt[3] * totalActualWorkTimeHours * 100) / 100;\n\n        // reset the arrays\n        var temp_rosteredHours = [];\n        var temp_breakTimeHours = [];\n        var temp_actualWorkTimeHours = [];\n\n        // push the required calculations in to the array\n\n        jt.push(\n            totalRosteredHours,\n            totalBreakTimeHours,\n            totalActualWorkTimeHours,\n            totalPay\n        );\n        //console.log(jt);\n        // jt = [...new Set(jt)];\n        //console.log(jt);\n        // establish the final array item for the person\n        final_records.push(jt);\n    }\n\n    //console.log(final_records);\n    // now create an object that replicate the data one but assigning each array item record to a key\n\n    var newDataObject = final_records.map(function (item) {\n        return {\n            roster_id: item[0],\n            username: item[1],\n            title: item[2],\n            pay_rate: \"$\" + item[3].toFixed(2),\n            rostered_hours: item[4],\n            breakTime: item[5],\n            acutalWorkTime: item[6],\n            pay: item[7],\n        };\n    });\n\n    return newDataObject;\n};\n\nexport default calculatePay;\n","// This module calcualtes the TOTALS fro the bottom of the reports\nconst calculateReportTotals = (object) => {\n    var wagesTotal = 0;\n    var rosteredHoursTotal = 0;\n    var breakTimeTotal = 0;\n    var actualWorkTimeTotal = 0;\n\n    var totalsObject = {};\n    object.map((item) => {\n        //console.log(item.pay);\n        wagesTotal += item.pay;\n        rosteredHoursTotal += item.rostered_hours;\n        breakTimeTotal += item.breakTime;\n        actualWorkTimeTotal += item.acutalWorkTime;\n    });\n\n    // create an totals object and assign values\n    totalsObject.totalRosteredHours = rosteredHoursTotal;\n    totalsObject.totalBreakTimeHours = breakTimeTotal;\n    totalsObject.totalActualWorkTimeHours = actualWorkTimeTotal;\n    totalsObject.totalWages = wagesTotal;\n\n    return totalsObject;\n};\n\nexport default calculateReportTotals;\n","// this module calculates the headings required for each report\n\nconst calculateHeadings = (dataObject) => {\n    const tableHeader = [];\n\n    // just assign the object record to be used to ascertain the headings for the table\n    let first_record = {};\n    if (dataObject.length > 0) {\n        first_record = dataObject[0];\n    }\n\n    // now obtain the table header headings to display on the report\n    // use the first object's key's as the place to obtain headings\n    console.log(\"*******************\");\n    for (const [key, value] of Object.entries(first_record)) {\n        tableHeader.push(key);\n    }\n\n    return tableHeader;\n};\n\nexport default calculateHeadings;\n","import React, { useEffect, useState } from \"react\";\nimport useApi from \"../../hooks/useApi\";\nimport LeftSidebar from \"../LeftSidebar\";\nimport { MDBContainer, MDBRow, MDBCol, MDBTable } from \"mdbreact\";\nimport ReactToPdf from \"react-to-pdf\";\nimport { SplitButton, Dropdown, ButtonGroup, Button } from \"react-bootstrap\";\nimport convertUnixTime from \"../../lib/convertUnixTime\";\nimport calculateBreak from \"../../lib/calculateBreak\";\nimport calculateCorrectPay from \"../../lib/calculateCorrectPayWeeklyWagersRoster\";\nimport calculateReportTotals from \"../../lib/calculateReportTotals\";\nimport calculateHeadings from \"../../lib/calculateHeadingsForReports.js\";\n// import \"../StaffListScreen.css\";\n\nconst ref = React.createRef();\nconst options = {\n  orientation: \"portrait\",\n  unit: \"in\",\n  format: [3000, 8000],\n};\n\nfunction ViewWeeklyWageRoster(props) {\n  const [totalHour, setTotalHour] = useState(0);\n  const { data, request: getDesiredWeekWages } = useApi(\n    `/wages1/${props.match.params.rosterID}`\n  );\n\n  let first_record = {};\n  // just assign the object record to be used to ascertain the heading for the table\n  if (data.length > 0) {\n    first_record = data[0];\n  }\n\n  useEffect(() => {\n    getDesiredWeekWages();\n    // setTotalHour();\n  }, []);\n  // console.log(\"**************************\");\n  //console.log(data);\n\n  // to get the length of the entire records returned in one objectyou can do the following\n  // console.log(Object.keys(data).length);\n  var objectLength = Object.keys(data).length;\n\n  // loop through the data object and calcuate required fields and remove 2 redundant columns that have issues with invalid dates.\n  for (var i = 0; i < objectLength; i++) {\n    if (data[i].hasOwnProperty(\"timeslot_from\")) {\n      // add 2 new keys\n      data[i].shift_start = convertUnixTime(Number(data[i].timeslot_from));\n      data[i].shift_end = convertUnixTime(Number(data[i].timeslot_to));\n      // convert the text timeslot data to numbers and then convert\n      // var temp_ts_from = convertUnixTime(Number(data[i].timeslot_from));\n      // var temp_ts_to = convertUnixTime(Number(data[i].timeslot_to));\n\n      // data[i].timeslot_from = temp_ts_from;\n      // data[i].timeslot_to = temp_ts_to;\n\n      // calculate breaktime\n      data[i].breakTime = calculateBreak(data[i].rostered_hours);\n      // calculate actual work time\n      data[i].actualWorkTime = data[i].rostered_hours - data[i].breakTime;\n      data[i].pay = data[i].actualWorkTime * data[i].pay_rate;\n\n      // remove the redundant timeslot_from, timeslot_to keys as they seem to have invalid dates being displayed.\n      delete data[i].timeslot_from;\n      delete data[i].timeslot_to;\n\n      // delete the shift start end times.\n      delete data[i].shift_start;\n      delete data[i].shift_end;\n    }\n  }\n\n  var newDataObject = calculateCorrectPay(data);\n\n  // determine the table headings\n  // var tableHeader = calculateHeadings(newDataObject);\n  var tableHeader = [\n    \"Roster ID\",\n    \"Username\",\n    \"Job Title\",\n    \"Hourly $ Rate\",\n    \"Rostered Hours\",\n    \"Break Time\",\n    \"Actual Work Time\",\n    \"Total Pay\",\n  ];\n\n  // calculate TOTALS for the bottom of the report\n  var reportTotals = calculateReportTotals(newDataObject);\n\n  return (\n    <MDBContainer fluid size=\"12\" sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n      <MDBRow center>\n        <MDBCol sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n          <LeftSidebar />\n        </MDBCol>\n      </MDBRow>\n\n      <MDBRow>\n        {/* <MDBCol size=\"12\" sm=\"4\" md=\"4\" lg=\"2\" xl=\"2\"></MDBCol> */}\n        <MDBCol size=\"12\" sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n          <MDBRow>\n            <MDBCol>\n              <div style={{ width: 100 + \"vw\" }}>\n                <ReactToPdf\n                  targetRef={ref}\n                  filename=\"roster.pdf\"\n                  options={options}\n                  x={1}\n                  y={0.1}\n                  scale={1.5}\n                >\n                  {({ toPdf }) => <Button onClick={toPdf}>Download pdf</Button>}\n                </ReactToPdf>\n                <div style={{ width: 100 + \"vw\" }} ref={ref}>\n                  <MDBTable\n                    sm=\"12\"\n                    style={{ wordBreak: \"break-all\" }}\n                    bordered\n                    hover\n                  >\n                    <thead>\n                      <tr>\n                        {tableHeader.map((tableHeading) => (\n                          <th>{tableHeading}</th>\n                        ))}\n                      </tr>\n                    </thead>\n                    {/* <tbody>{tableBody}</tbody> */}\n                    <tbody>\n                      {newDataObject.map((item) => (\n                        <tr>\n                          {Object.values(item).map((value, index) => (\n                            <td>{value}</td>\n                          ))}\n                        </tr>\n                      ))}\n                      <tr>\n                        Total Wages:\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td>{reportTotals.totalRosteredHours}</td>\n                        <td>{reportTotals.totalBreakTimeHours}</td>\n                        <td>{reportTotals.totalActualWorkTimeHours}</td>\n                        <td>${reportTotals.totalWages}</td>\n                      </tr>\n                    </tbody>\n                  </MDBTable>\n                </div>\n              </div>\n            </MDBCol>\n          </MDBRow>\n        </MDBCol>\n      </MDBRow>\n      <MDBRow className=\"button-panel\">\n        <MDBCol sm=\"6\" md=\"5\" lg=\"4\" xl=\"3\">\n          <Button href=\"#\" btn-block>\n            Publish\n          </Button>\n        </MDBCol>\n        <MDBCol sm=\"6\" md=\"5\" lg=\"4\" xl=\"3\">\n          <Button href=\"/admin\" btn-block>\n            Back to Admin\n          </Button>\n        </MDBCol>\n      </MDBRow>\n    </MDBContainer>\n  );\n}\n\nexport default ViewWeeklyWageRoster;\n","// GJ: This modules take the data object from the WEEKLY WAGE BY JOB TITLE , and calculates the correct pay\n\nimport calculateBreak from \"./calculateBreak\";\n\nconst calculatePay = (data) => {\n    // copy the object\n    // var clonedObject = Object.assign({}, data);\n    // console.log(clonedObject);\n\n    // just get a list of the usernames to aggregate hours and pay\n    var temp_uniqueTitles = [];\n    var objectLength = Object.keys(data).length;\n    for (var i = 0; i < objectLength; i++) {\n        temp_uniqueTitles.push(data[i].title);\n    }\n    // create a unique set that only contains 1 instance of a name\n    var uniqueTitles = [...new Set(temp_uniqueTitles)];\n\n    // declare some array variables to store the data\n    var temp_rosteredHours = [];\n    var temp_breakTimeHours = [];\n    var temp_actualWorkTimeHours = [];\n    var jt = [];\n    var final_records = [];\n    // for each unique name, loop through the data and take the roster id, usrname, title and calculate the running total of variious variables\n    for (var j = 0; j < uniqueTitles.length; j++) {\n        jt = [];\n        for (var i = 0; i < objectLength; i++) {\n            var counter = 0;\n            if (data[i].title === uniqueTitles[j]) {\n                if (counter === 0) {\n                    jt.push(data[i].roster_id);\n                    jt.push(data[i].title);\n                    jt.push(Number(data[i].pay_rate));\n                    jt = [...new Set(jt)];\n                }\n                // store each job title various metrics in an array\n                temp_rosteredHours.push(Number(data[i].rostered_hours));\n                temp_breakTimeHours.push(\n                    Number(calculateBreak(data[i].rostered_hours))\n                );\n                temp_actualWorkTimeHours.push(\n                    Number(\n                        data[i].rostered_hours -\n                            Number(calculateBreak(data[i].rostered_hours))\n                    )\n                );\n                //console.log(temp_rosteredHours);\n                //console.log(temp_breakTimeHours);\n                // console.log(temp_actualWorkTimeHours);\n                counter += 1;\n            }\n        }\n\n        // now perform reduce to calculate running total of the 3 arrays above\n        var totalRosteredHours = temp_rosteredHours.reduce(\n            (total, currentValue) => {\n                return total + currentValue;\n            },\n            0\n        );\n        // console.log(`temp_rosteredHours`, totalRosteredHours);\n\n        var totalBreakTimeHours = temp_breakTimeHours.reduce(\n            (total, currentValue) => {\n                return total + currentValue;\n            },\n            0\n        );\n        //console.log(`temp_breakTimeHours`, totalBreakTimeHours);\n\n        var totalActualWorkTimeHours = temp_actualWorkTimeHours.reduce(\n            (total, currentValue) => {\n                return total + currentValue;\n            },\n            0\n        );\n        // console.log(`temp_actualWorkTimeHours`, totalActualWorkTimeHours);\n\n        //calculate actual pay_rate\n        var totalPay = Math.round(jt[2] * totalActualWorkTimeHours * 100) / 100;\n\n        // reset the arrays\n        var temp_rosteredHours = [];\n        var temp_breakTimeHours = [];\n        var temp_actualWorkTimeHours = [];\n\n        // push the required calculations in to the array\n\n        jt.push(\n            totalRosteredHours,\n            totalBreakTimeHours,\n            totalActualWorkTimeHours,\n            totalPay\n        );\n        //console.log(jt);\n        // jt = [...new Set(jt)];\n        //console.log(jt);\n        // establish the final array item for the person\n        final_records.push(jt);\n    }\n\n    //console.log(final_records);\n    // now create an object that replicate the data one but assigning each array item record to a key\n\n    var newDataObject = final_records.map(function (item) {\n        return {\n            roster_id: item[0],\n            title: item[1],\n            pay_rate: \"$\" + item[2].toFixed(2),\n            rostered_hours: item[3],\n            breakTime: item[4],\n            acutalWorkTime: item[5],\n            pay: item[6],\n        };\n    });\n\n    return newDataObject;\n};\n\nexport default calculatePay;\n","import React, { useEffect, useState } from \"react\";\nimport useApi from \"../../hooks/useApi\";\nimport LeftSidebar from \"../LeftSidebar\";\nimport { MDBContainer, MDBRow, MDBCol, MDBTable } from \"mdbreact\";\nimport ReactToPdf from \"react-to-pdf\";\nimport { SplitButton, Dropdown, ButtonGroup, Button } from \"react-bootstrap\";\n// import \"../StaffListScreen.css\";\nimport calculateCorrectJobWagesPay from \"../../lib/calculateCorrectPayWeeklyJobTitleRoster\";\nimport calculateReportTotals from \"../../lib/calculateReportTotals\";\nimport calculateHeadings from \"../../lib/calculateHeadingsForReports.js\";\n\nconst ref = React.createRef();\nconst options = {\n  orientation: \"potrait\",\n  unit: \"in\",\n  format: [6000, 1400],\n};\n\nfunction ViewWeeklyJobWageRoster(props) {\n  const { data, request: getDesiredWeekJobWages } = useApi(\n    `/wages1/jobtitle/${props.match.params.rosterID}`\n  );\n\n  useEffect(() => {\n    getDesiredWeekJobWages();\n    // setTotalHour();\n  }, []);\n  console.log(\"**************************\");\n  console.log(data);\n\n  // const tableHeader = [];\n  let count = 0;\n\n  // data.map((item) => {\n  //     Object.keys(item).forEach((key, value) => {\n  //         console.log(key, value);\n  //     });\n  // });\n\n  // data.map((item) => {\n  //     Object.values(item).map((value, index) => {\n  //         console.log(value);\n  //     });\n  // });\n\n  // take a copy and clone the data object\n  var clonedObject = Object.assign({}, data);\n  var data2 = calculateCorrectJobWagesPay(clonedObject);\n\n  // determine the table headings\n  var tableHeader = calculateHeadings(data2);\n  // calculate TOTALS for the bottom of the report\n  var reportTotals = calculateReportTotals(data2);\n  // var tableHeader = calculateHeadings(newDataObject);\n  var tableHeader = [\n    \"Roster ID\",\n    \"Job Title\",\n    \"Hourly $ Rate\",\n    \"Rostered Hours\",\n    \"Break Time\",\n    \"Actual Work Time\",\n    \"Total Pay\",\n  ];\n\n  return (\n    <MDBContainer fluid size=\"12\" sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n      <MDBRow center>\n        <MDBCol sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n          <LeftSidebar />\n        </MDBCol>\n      </MDBRow>\n      <MDBRow>\n        {/* <MDBCol size=\"12\" sm=\"4\" md=\"4\" lg=\"2\" xl=\"2\"></MDBCol> */}\n        <MDBCol size=\"12\" sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n          <MDBRow>\n            <MDBCol>\n              <div style={{ width: 100 + \"vw\" }}>\n                <ReactToPdf\n                  targetRef={ref}\n                  filename=\"roster.pdf\"\n                  options={options}\n                  x={1}\n                  y={0.1}\n                  scale={1.5}\n                >\n                  {({ toPdf }) => <Button onClick={toPdf}>Download pdf</Button>}\n                </ReactToPdf>\n                <div style={{ width: 100 + \"vw\" }} ref={ref}>\n                  <MDBTable\n                    sm=\"12\"\n                    style={{ wordBreak: \"break-all\" }}\n                    bordered\n                    hover\n                  >\n                    <thead>\n                      <tr>\n                        {tableHeader.map((tableHeading) => (\n                          <th>{tableHeading}</th>\n                        ))}\n                      </tr>\n                    </thead>\n                    {/* <tbody>{tableBody}</tbody> */}\n                    <tbody>\n                      {data2.map((item) => (\n                        <tr>\n                          {Object.values(item).map((value, index) => (\n                            <td>{value}</td>\n                          ))}\n                        </tr>\n                      ))}\n                      <tr>\n                        Total Wages:\n                        <td></td>\n                        <td></td>\n                        <td>{reportTotals.totalRosteredHours}</td>\n                        <td>{reportTotals.totalBreakTimeHours}</td>\n                        <td>{reportTotals.totalActualWorkTimeHours}</td>\n                        <td>${reportTotals.totalWages}</td>\n                      </tr>\n                    </tbody>\n                  </MDBTable>\n                </div>\n              </div>\n            </MDBCol>\n          </MDBRow>\n        </MDBCol>\n      </MDBRow>\n      <MDBRow className=\"button-panel\">\n        <MDBCol sm=\"6\" md=\"5\" lg=\"4\" xl=\"3\">\n          <Button href=\"#\" btn-block>\n            Publish\n          </Button>\n        </MDBCol>\n        <MDBCol sm=\"6\" md=\"5\" lg=\"4\" xl=\"3\">\n          <Button href=\"/admin\" btn-block>\n            Back to Admin\n          </Button>\n        </MDBCol>\n      </MDBRow>\n    </MDBContainer>\n  );\n}\n\nexport default ViewWeeklyJobWageRoster;\n","// GJ: This modules take the data object from the WEEKLY WAGES BY STAFF MEMBER ROSTER, and calculates the correct pay\nimport calculateBreak from \"./calculateBreak.js\";\nconst calculatePay = (data) => {\n    // copy the object\n    // var clonedObject = Object.assign({}, data);\n    // console.log(clonedObject);\n\n    // console.log(data);\n\n    // just get a list of the usernames to aggregate hours and pay\n    var rosterIDandTitleArray = [];\n    var objectLength = Object.keys(data).length;\n    var temp_pairs = [];\n\n    // loop through the entire data object and return a set of unique Roster IDs and Job Titles in an array\n    for (var i = 0; i < objectLength; i++) {\n        // take a copy of the current values\n        if (data[i].roster_id != temp_a && data[i].roster_id != temp_b) {\n            temp_pairs.push(data[i].roster_id);\n            temp_pairs.push(data[i].title);\n\n            rosterIDandTitleArray.push(temp_pairs);\n        }\n        // take a copy of the current iterations values for comparison\n        var temp_a = data[i].roster_id;\n        var temp_b = data[i].title;\n\n        // reset the temporary array\n        temp_pairs = [];\n    }\n\n    // declare some array variables to store the data\n    var temp_rosteredHours = [];\n    var temp_breakTimeHours = [];\n    var temp_actualWorkTimeHours = [];\n    var jt = [];\n    var final_records = [];\n    // for each unique name, loop through the data and take the roster id, usrname, title and calculate the running total of variious variables\n    for (var j = 0; j < rosterIDandTitleArray.length; j++) {\n        jt = [];\n        for (var i = 0; i < objectLength; i++) {\n            var counter = 0;\n            if (\n                data[i].title === rosterIDandTitleArray[j][1] &&\n                data[i].roster_id === rosterIDandTitleArray[j][0]\n            ) {\n                if (counter === 0) {\n                    jt.push(data[i].roster_id);\n                    jt.push(data[i].username);\n                    jt.push(data[i].title);\n                    jt.push(Number(data[i].pay_rate));\n\n                    jt = [...new Set(jt)];\n                }\n                // store each persons various metrics in an array and perform necessary calculations at the individual level\n                temp_rosteredHours.push(Number(data[i].rostered_hours));\n\n                temp_breakTimeHours.push(\n                    calculateBreak(data[i].rostered_hours)\n                );\n                temp_actualWorkTimeHours.push(\n                    data[i].rostered_hours -\n                        calculateBreak(data[i].rostered_hours)\n                );\n\n                counter += 1;\n            }\n        }\n\n        // now perform reduce to calculate running total of the 3 arrays above\n        var totalRosteredHours = temp_rosteredHours.reduce(\n            (total, currentValue) => {\n                return total + currentValue;\n            },\n            0\n        );\n        //console.log(`temp_rosteredHours`, totalRosteredHours);\n\n        var totalBreakTimeHours = temp_breakTimeHours.reduce(\n            (total, currentValue) => {\n                return total + currentValue;\n            },\n            0\n        );\n        // console.log(`temp_breakTimeHours`, totalBreakTimeHours);\n\n        var totalActualWorkTimeHours = temp_actualWorkTimeHours.reduce(\n            (total, currentValue) => {\n                return total + currentValue;\n            },\n            0\n        );\n        // console.log(`temp_actualWorkTimeHours`, totalActualWorkTimeHours);\n\n        // calculate actual pay_rate\n        var totalPay = (jt[3] * totalActualWorkTimeHours * 100) / 100;\n\n        // reset the arrays\n        var temp_rosteredHours = [];\n        var temp_breakTimeHours = [];\n        var temp_actualWorkTimeHours = [];\n\n        // push the required calculations in to the array\n\n        jt.push(\n            totalRosteredHours,\n            totalBreakTimeHours,\n            totalActualWorkTimeHours,\n            totalPay\n        );\n        //console.log(jt);\n        jt = [...new Set(jt)];\n        //console.log(jt);\n        // establish the final array item for the person\n        final_records.push(jt);\n    }\n\n    //console.log(final_records);\n    // now create an object that replicate the data one but assigning each array item record to a key\n\n    var newDataObject = final_records.map(function (item) {\n        return {\n            roster_id: item[0],\n            username: item[1],\n            title: item[2],\n            pay_rate: \"$\" + item[3],\n            rostered_hours: item[4],\n            breakTime: item[5],\n            acutalWorkTime: item[6],\n            pay: item[7],\n        };\n    });\n\n    return newDataObject;\n};\n\nexport default calculatePay;\n","import React, { useEffect, useState } from \"react\";\nimport useApi from \"../../hooks/useApi\";\nimport LeftSidebar from \"../LeftSidebar\";\nimport { MDBContainer, MDBRow, MDBCol, MDBTable } from \"mdbreact\";\nimport ReactToPdf from \"react-to-pdf\";\nimport { SplitButton, Dropdown, ButtonGroup, Button } from \"react-bootstrap\";\n// import \"../StaffListScreen.css\";\nimport calculateCorrectPayStaff from \"../../lib/calculateCorrectPayWeeklyStaffRoster\";\nimport calculateReportTotals from \"../../lib/calculateReportTotals\";\nimport calculateHeadings from \"../../lib/calculateHeadingsForReports.js\";\n\nconst ref = React.createRef();\nconst options = {\n  orientation: \"potrait\",\n  unit: \"in\",\n  format: [6000, 1400],\n};\n\nfunction ViewWeeklyStaffWageRoster(props) {\n  const { data, request: getWagesByDesiredUsername } = useApi(\n    `/wages1/wagesbydesiredusername/${props.match.params.username}`\n  );\n\n  useEffect(() => {\n    getWagesByDesiredUsername();\n  }, []);\n  console.log(\"**************************\");\n  // console.log(data);\n\n  // create a copy of the data array\n  var clonedObject = Object.assign({}, data);\n\n  // obtain all the necessary calculation and return data as a new object\n  var data2 = calculateCorrectPayStaff(clonedObject);\n\n  // calculate TOTALS for the bottom of the report\n  var reportTotals = calculateReportTotals(data2);\n\n  // determine the table headings\n  // var tableHeader = calculateHeadings(data2);\n\n  var tableHeader = [\n    \"Roster ID\",\n    \"Username\",\n    \"Job Title\",\n    \"Hourly $ Rate\",\n    \"Rostered Hours\",\n    \"Break Time\",\n    \"Actual Work Time\",\n    \"Total Pay\",\n  ];\n\n  return (\n    <MDBContainer fluid size=\"12\" sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n      <MDBRow center>\n        <MDBCol sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n          <LeftSidebar />\n        </MDBCol>\n      </MDBRow>\n      <MDBRow>\n        {/* <MDBCol size=\"12\" sm=\"4\" md=\"4\" lg=\"2\" xl=\"2\"></MDBCol> */}\n        <MDBCol size=\"12\" sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n          <MDBRow>\n            <MDBCol>\n              <div style={{ width: 100 + \"vw\" }}>\n                <ReactToPdf\n                  targetRef={ref}\n                  filename=\"roster.pdf\"\n                  options={options}\n                  x={1}\n                  y={0.1}\n                  scale={1.5}\n                >\n                  {({ toPdf }) => <Button onClick={toPdf}>Download pdf</Button>}\n                </ReactToPdf>\n                <div style={{ width: 100 + \"vw\" }} ref={ref}>\n                  <MDBTable\n                    sm=\"12\"\n                    style={{ wordBreak: \"break-all\" }}\n                    bordered\n                    hover\n                  >\n                    <thead>\n                      <tr>\n                        {tableHeader.map((tableHeading) => (\n                          <th>{tableHeading}</th>\n                        ))}\n                      </tr>\n                    </thead>\n                    {/* <tbody>{tableBody}</tbody> */}\n                    <tbody>\n                      {data2.map((item) => (\n                        <tr>\n                          {Object.values(item).map((value, index) => (\n                            <td>{value}</td>\n                          ))}\n                        </tr>\n                      ))}\n                      <tr>\n                        Total Wages:\n                        <td></td>\n                        <td></td>\n                        <td></td>\n                        <td>{reportTotals.totalRosteredHours}</td>\n                        <td>{reportTotals.totalBreakTimeHours}</td>\n                        <td>{reportTotals.totalActualWorkTimeHours}</td>\n                        <td>${reportTotals.totalWages}</td>\n                      </tr>\n                    </tbody>\n                  </MDBTable>\n                </div>\n              </div>\n            </MDBCol>\n          </MDBRow>\n        </MDBCol>\n      </MDBRow>\n      <MDBRow className=\"button-panel\">\n        <MDBCol sm=\"6\" md=\"5\" lg=\"4\" xl=\"3\">\n          <Button href=\"#\" btn-block>\n            Publish\n          </Button>\n        </MDBCol>\n        <MDBCol sm=\"6\" md=\"5\" lg=\"4\" xl=\"3\">\n          <Button href=\"/admin\" btn-block>\n            Back to Admin\n          </Button>\n        </MDBCol>\n      </MDBRow>\n    </MDBContainer>\n  );\n}\n\nexport default ViewWeeklyStaffWageRoster;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  MDBRow,\n  MDBCol,\n  MDBInput,\n  MDBContainer,\n  MDBNotification,\n} from \"mdbreact\";\nimport useApi from \"../../hooks/useApi\";\nimport { Button, Toast } from \"react-bootstrap\";\n\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  invalidEmailMsg,\n  invalidMinMaxMsg,\n  invalidNumber,\n} from \"../../lib/formValidation\";\n\nfunction CreateGroup(props) {\n  const [groupTitle, setGroupTitle] = useState({});\n  const [groupDuration, setGroupDuration] = useState(\"\");\n  const [payRate, setPayRate] = useState(\"\");\n  let history = useHistory();\n\n  const handleGroupTitleChange = (e) => {\n    setGroupTitle(e.target.value);\n  };\n  const handleGroupDurationChange = (e) => {\n    setGroupDuration(e.target.value);\n  };\n  const handlePayRateChange = (e) => {\n    setPayRate(e.target.value);\n  };\n  useEffect(() => {\n    // getAllGroups();\n  }, []);\n\n  const handleSubmit = async (e) => {\n    // debugger;\n    e.preventDefault();\n    // if (!selectedGroup.staff_role) {\n    //   return;\n    // }\n\n    try {\n      const response = await axios.post(\"/groups/create\", {\n        newGroup: {\n          groupTitle,\n          groupDuration,\n          payRate,\n        },\n      });\n      if (response.data === true) {\n        console.log(response.statusText);\n        console.log(response.data);\n        history.replace(\"/ViewGroups\");\n      } else {\n        alert(\n          \"Error occured. Could not create new group. This group may already exist.\"\n        );\n      }\n    } catch (error) {\n      alert(`${error.response.statusText} \\n${error}\\n${error.response.data}`);\n      // Toast.error(\"New group could not be added. Try again!\");\n    }\n  };\n\n  return (\n    <div>\n      <MDBRow center>\n        <MDBCol sm=\"12\" md=\"6\" lg=\"5\" xl=\"5\" className=\"grey-text\">\n          <form\n            onSubmit={handleSubmit}\n            className=\"staff-new-form border border-light p-5\"\n          >\n            <p className=\"text-center h4  mb-4\">{\"Add New Group\"}</p>\n            <div className=\"grey-text\">\n              <MDBInput\n                label=\"Group Title\"\n                icon=\"clock\"\n                group\n                type=\"text\"\n                validate\n                error=\"wrong\"\n                success=\"right\"\n                required\n                name=\"groupTitle\"\n                minLength=\"3\"\n                maxLength=\"50\"\n                onChange={handleGroupTitleChange}\n                onInvalid={(e) => invalidMinMaxMsg(e, 3, 50)}\n                onInput={(e) => invalidMinMaxMsg(e, 3, 50)}\n                autoComplete=\"new-password\"\n                // value={}\n              />\n\n              <MDBInput\n                label=\"Minimum Duration Hour(s)\"\n                icon=\"clock\"\n                group\n                type=\"text\"\n                validate\n                error=\"wrong\"\n                success=\"right\"\n                required\n                name=\"groupDuration\"\n                minLength=\"1\"\n                maxLength=\"5\"\n                onChange={handleGroupDurationChange}\n                onInvalid={(e) => invalidNumber(e, 1, 5)}\n                onInput={(e) => invalidNumber(e, 1, 5)}\n                autoComplete=\"new-password\"\n                // value={}\n              />\n              <MDBInput\n                label=\"Per Hour Pay Rate\"\n                icon=\"clock\"\n                group\n                type=\"text\"\n                validate\n                error=\"wrong\"\n                success=\"right\"\n                required\n                name=\"payRate\"\n                minLength=\"1\"\n                maxLength=\"9\"\n                onChange={handlePayRateChange}\n                onInvalid={(e) => invalidNumber(e, 1, 9)}\n                onInput={(e) => invalidNumber(e, 1, 9)}\n                autoComplete=\"new-password\"\n                // value={}\n              />\n            </div>\n\n            <Button\n              type=\"submit\"\n              value=\"Submit\"\n              className=\"btn btn-primary my-3 btn-block mr-2\"\n            >\n              {\"Create New Group\"}\n            </Button>\n\n            <Button\n              className=\"btn btn-primary my-3 btn-block\"\n              href=\"/ViewGroups\"\n            >\n              Back\n            </Button>\n          </form>\n        </MDBCol>\n      </MDBRow>\n      {/* <ToastContainer\n        hideProgressBar={true}\n        newestOnTop={true}\n        autoClose={5000}\n      /> */}\n    </div>\n  );\n}\n\nexport default CreateGroup;\n","import React, { useEffect, useState } from \"react\";\nimport useApi from \"../../hooks/useApi\";\nimport { MDBRow, MDBCol } from \"mdbreact\";\nimport PaginationTable from \"rbtpagination\";\nimport { Button } from \"react-bootstrap\";\n\n// import \"../../../node_modules/rbtpagination/dist/index.css\";\nimport \"../../../node_modules/rbtpagination//dist/index.css\";\nimport LeftSidebar from \"../LeftSidebar\";\n\nconst searchByCriteraiList = [\n  { label: \"ID\", key: \"id\" },\n  { label: \"Title\", key: \"title\" },\n  { label: \"Minimum Shift Duration Hour\", key: \"group_duration\" },\n  { label: \"Per Hour Rate\", key: \"pay_rate\" },\n];\n\nconst tableColumnsAndDataKeys = [\n  { label: \"ID\", key: \"id\" },\n  { label: \"Title\", key: \"title\" },\n  { label: \"Minimum Shift Duration Hour\", key: \"group_duration\" },\n  { label: \"Per Hour Rate\", key: \"pay_rate\" },\n];\nfunction ViewGroup(props) {\n  const { data, request: getAllGroups } = useApi(`/groups/`);\n  // All group from database\n\n  useEffect(() => {\n    getAllGroups();\n  }, []);\n\n  return (\n    <div>\n      <MDBRow center>\n        <MDBCol sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n          <LeftSidebar />\n        </MDBCol>\n      </MDBRow>\n      <PaginationTable\n        dataSet={data}\n        searchData={searchByCriteraiList}\n        tableData={tableColumnsAndDataKeys}\n        handleItemClick={true}\n        itemClickRedirect=\"/GroupEditScreen\"\n        itemsPerPage={20}\n      />\n\n      <MDBRow className=\"button-panel\">\n        <MDBCol>\n          <Button href=\"/createGroup\" block>\n            Create New Role\n          </Button>\n        </MDBCol>\n        <MDBCol>\n          <Button href=\"/admin\" block>\n            Back\n          </Button>\n        </MDBCol>\n      </MDBRow>\n    </div>\n  );\n}\n\nexport default ViewGroup;\n","import React, { useState } from \"react\";\nimport { MDBRow, MDBCol, MDBInput } from \"mdbreact\";\nimport \"../StaffNewScreen.css\";\nimport { Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { useHistory } from \"react-router-dom\";\n\nimport {\n  invalidEmailMsg,\n  invalidMinMaxMsg,\n  invalidNumber,\n} from \"../../lib/formValidation\";\n\nfunction GroupForm({ data }) {\n  const [groupId] = useState(data ? data.id : \"\");\n  const [title, setTitle] = useState(data ? data.title : \"\");\n  const [groupDuration, setGroupDuration] = useState(\n    data ? data.group_duration : \"\"\n  );\n  const [payRate, setPayRate] = useState(data ? data.pay_rate : \"\");\n  let history = useHistory();\n\n  const handleTitleChange = (e) => {\n    setTitle(e.target.value);\n  };\n  const handleGroupDurationChange = (e) => {\n    setGroupDuration(e.target.value);\n  };\n  const handlePayRateChange = (e) => {\n    setPayRate(e.target.value);\n  };\n\n  const handleRemoveGroup = async (e) => {\n    console.log(\"Delete\");\n\n    const response = await axios.delete(`/groups/delete/${groupId}`, {});\n    console.log(response.status);\n    if (response.status === 200) {\n      console.log(response.statusText);\n      history.replace(\"/ViewGroups\");\n    } else {\n      alert(response.statusText);\n    }\n  };\n  const handleUpdateSubmit = async (e) => {\n    e.preventDefault();\n    const response = await axios.put(`/groups/edit/${groupId}`, {\n      updatedGroup: {\n        title,\n        groupDuration,\n        payRate,\n      },\n    });\n    console.log(response.status);\n    if (response.status === 200) {\n      console.log(response.statusText);\n      history.replace(\"/ViewGroups\");\n    } else {\n      alert(response.statusText);\n    }\n  };\n  const handleSubmit = async (e) => {\n    e.target.classList.add(\"waves-effect\");\n    // debugger;\n    e.preventDefault();\n\n    try {\n      const response = await axios.post(\"/group\", {\n        newGroup: {\n          title,\n          groupDuration,\n          payRate,\n        },\n      });\n      if (response.status === 200) {\n        console.log(response.statusText);\n        history.replace(\"/ViewGroups\");\n      }\n    } catch (error) {\n      alert(`${error.response.statusText} \\n${error}\\n${error.response.data}`);\n    }\n  };\n  return (\n    <div>\n      <MDBRow center>\n        <MDBCol sm=\"12\" md=\"9\" lg=\"7\" className=\"grey-text\">\n          <form\n            className=\"staff-new-form border border-light\"\n            onSubmit={data ? handleUpdateSubmit : handleSubmit}\n          >\n            <p className=\"h5 text-center \">\n              {data ? \"Edit Group\" : \"Add New Group\"}\n            </p>\n            <div className=\"grey-text\">\n              <MDBRow center>\n                <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                  <MDBInput\n                    label=\"Group Title\"\n                    icon=\"clock\"\n                    group\n                    type=\"text\"\n                    validate\n                    error=\"wrong\"\n                    success=\"right\"\n                    required\n                    name=\"groupTitle\"\n                    minLength=\"3\"\n                    maxLength=\"50\"\n                    onChange={handleTitleChange}\n                    onInvalid={(e) => invalidMinMaxMsg(e, 3, 50)}\n                    onInput={(e) => invalidMinMaxMsg(e, 3, 50)}\n                    autoComplete=\"new-password\"\n                    value={title}\n                  />\n                </MDBCol>\n              </MDBRow>\n              <MDBRow center>\n                <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                  <MDBInput\n                    label=\"Minimum Duration Hour(s)\"\n                    icon=\"clock\"\n                    group\n                    type=\"text\"\n                    validate\n                    error=\"wrong\"\n                    success=\"right\"\n                    required\n                    name=\"groupDuration\"\n                    minLength=\"1\"\n                    maxLength=\"5\"\n                    onChange={handleGroupDurationChange}\n                    onInvalid={(e) => invalidNumber(e, 1, 5)}\n                    onInput={(e) => invalidNumber(e, 1, 5)}\n                    autoComplete=\"new-password\"\n                    value={groupDuration}\n                  />\n                </MDBCol>\n              </MDBRow>\n\n              <MDBRow center>\n                <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                  <MDBInput\n                    size=\"lg\"\n                    label=\"Pay Rate\"\n                    icon=\"address-card\"\n                    group\n                    type=\"text\"\n                    validate\n                    error=\"wrong\"\n                    success=\"right\"\n                    required\n                    name=\"address\"\n                    minLength=\"3\"\n                    maxLength=\"50\"\n                    onChange={handlePayRateChange}\n                    onInvalid={(e) => invalidMinMaxMsg(e, 3, 50)}\n                    onInput={(e) => invalidMinMaxMsg(e, 3, 50)}\n                    autoComplete=\"new-password\"\n                    value={payRate}\n                  />\n                </MDBCol>\n              </MDBRow>\n              <MDBCol>\n                <input style={{ display: \"none\" }} type=\"label\" name=\"email2\" />\n              </MDBCol>\n            </div>\n            {\n              <MDBRow center>\n                <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                  <Button\n                    type=\"submit\"\n                    value=\"Submit\"\n                    className=\"btn btn-primary my-3 btn-block mr-2\"\n                  >\n                    {data ? \"Update Group\" : \"Create New Group\"}\n                  </Button>\n                </MDBCol>\n                {/* <button className=\"btn btn-primary my-4 btn-block\" type=\"submit\">\n            {data ? \"Update Staff\" : \"Create New Staff\"}\n            {/* </Button> */}\n                {/* </button> */}\n                {data ? (\n                  <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                    <Button\n                      value=\"Submit\"\n                      className=\"btn btn-danger my-3 btn-block mr-2\"\n                      onClick={handleRemoveGroup}\n                    >\n                      Remove Group\n                    </Button>\n                  </MDBCol>\n                ) : (\n                  \"\"\n                )}\n                <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                  <Button\n                    className=\"btn btn-primary my-3 btn-block\"\n                    href=\"/ViewGroups\"\n                  >\n                    Back\n                  </Button>\n                </MDBCol>\n              </MDBRow>\n            }\n          </form>\n        </MDBCol>\n      </MDBRow>\n    </div>\n  );\n}\n\nexport default GroupForm;\n","import React from \"react\";\nimport { MDBContainer } from \"mdbreact\";\nimport \"../StaffNewScreen.css\";\nimport GroupForm from \"./GroupForm\";\n\nfunction GroupEditScreen({ location }) {\n  return (\n    <div>\n      <GroupForm data={location.state} />\n    </div>\n  );\n}\n\nexport default GroupEditScreen;\n","// import React from \"react\";\nimport React, { useEffect, useState } from \"react\";\nimport { MDBRow, MDBCol, MDBInput, MDBBtn } from \"mdbreact\";\nimport { Button, ThemeProvider } from \"react-bootstrap\";\nimport useApi from \"../../hooks/useApi\";\nimport LeftSidebar from \"../LeftSidebar\";\nimport {\n  MDBDropdown,\n  MDBDropdownToggle,\n  MDBDropdownMenu,\n  MDBDropdownItem,\n} from \"mdbreact\";\n\nfunction ViewRoster({}) {\n  const { data: rosters, request: getRosters } = useApi(\"/roster/allRosters\");\n  useEffect(() => {\n    getRosters();\n  }, []);\n\n  let statusArray = [];\n  rosters.map((roster) => {\n    if (!statusArray.includes(roster.status)) {\n      statusArray.push(roster.status);\n    }\n  });\n  return (\n    <MDBRow center>\n      <MDBRow center>\n        <MDBCol sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n          <LeftSidebar />\n        </MDBCol>\n\n        <MDBCol sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n          <MDBRow center>\n            {statusArray.map((status) => (\n              <MDBCol sm=\"2\" className=\"grey-text\">\n                <MDBDropdown>\n                  <MDBDropdownToggle caret color=\"primary\">\n                    {status}\n                  </MDBDropdownToggle>\n                  <MDBDropdownMenu basic>\n                    {rosters.map((roster) =>\n                      roster.status == status ? (\n                        <MDBDropdownItem\n                          href={`/viewWeeklyRoster/${roster.roster_id}`}\n                        >\n                          {roster.title}\n                        </MDBDropdownItem>\n                      ) : (\n                        \"\"\n                      )\n                    )}\n                  </MDBDropdownMenu>\n                </MDBDropdown>\n              </MDBCol>\n            ))}\n          </MDBRow>\n        </MDBCol>\n      </MDBRow>\n    </MDBRow>\n  );\n}\nexport default ViewRoster;\n//select roster_id, from roster group by status order by roster_id;\n\n//href={`/viewWeeklyRoster/${roster.roster_id}`}\n","import React, { useEffect, useState } from \"react\";\nimport useApi from \"../../hooks/useApi\";\nimport LeftSidebar from \"../LeftSidebar\";\nimport { MDBContainer, MDBRow, MDBCol, MDBTable } from \"mdbreact\";\nimport ReactToPdf from \"react-to-pdf\";\nimport { SplitButton, Dropdown, ButtonGroup, Button } from \"react-bootstrap\";\nimport \"../StaffListScreen.css\";\n\nconst ref = React.createRef();\nconst options = {\n  orientation: \"potrait\",\n  unit: \"in\",\n  format: [2500, 400],\n};\n\nfunction WeeklyRoster(props) {\n  const [totalHour, setTotalHour] = useState(0);\n  const { data, request: getShifts } = useApi(\n    `/roster/${props.match.params.rosterID}`\n  );\n  let shifts = {};\n  let Total = {};\n  if (data.length > 0) {\n    shifts = data[0];\n    Total = data[1];\n  }\n\n  useEffect(() => {\n    getShifts();\n    // setTotalHour();\n  }, []);\n\n  const tableHeader = [];\n  let count = 0;\n  console.log(\"shifts\", shifts);\n  Object.values(shifts).map((shift_, index1) => {\n    shift_.map((shift, index) => {\n      if (index1 === 0 && index == 0) {\n        let weekStart = new Date(shift.week_start);\n        let weekEnd = new Date(shift.week_end);\n        let rosterPeriod = (weekEnd - weekStart) / 1000 / 60 / 60 / 24;\n        console.log({ weekStart }, { weekEnd }, { rosterPeriod });\n        // console.log(rosterPeriod);\n        for (let i = 0; i <= rosterPeriod; i++) {\n          count++;\n          let nextDay = new Date(weekStart);\n          nextDay.setDate(nextDay.getDate() + i);\n          tableHeader.push(nextDay.toDateString());\n        }\n      }\n    });\n  });\n  console.log({ tableHeader });\n\n  return (\n    <MDBContainer fluid size=\"12\" sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n      <MDBRow center>\n        <MDBCol sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n          <LeftSidebar />\n        </MDBCol>\n      </MDBRow>\n      <MDBRow>\n        {/* <MDBCol size=\"12\" sm=\"4\" md=\"4\" lg=\"2\" xl=\"2\"></MDBCol> */}\n        <MDBCol size=\"12\" sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n          <MDBRow>\n            <MDBCol>\n              <div style={{ width: 100 + \"vw\" }}>\n                <ReactToPdf\n                  targetRef={ref}\n                  filename=\"roster.pdf\"\n                  options={options}\n                  x={0.5}\n                  y={0.5}\n                  scale={0.5}\n                >\n                  {({ toPdf }) => <Button onClick={toPdf}>Download pdf</Button>}\n                </ReactToPdf>\n                <div style={{ width: 100 + \"vw\" }} ref={ref}>\n                  <MDBTable\n                    sm=\"12\"\n                    style={{ wordBreak: \"break-all\" }}\n                    bordered\n                    hover\n                  >\n                    <thead>\n                      <tr>\n                        <th>Name</th>\n                        {tableHeader.map((rosterDay) => (\n                          <th>{rosterDay}</th>\n                        ))}\n                        {/* <th>Total</th> */}\n                        <th>Total Hours</th>\n                      </tr>\n                    </thead>\n                    {/* <tbody>{tableBody}</tbody> */}\n                    <tbody>\n                      {Object.keys(shifts).map((staff) => (\n                        <tr>\n                          <th>{staff}</th>\n                          {tableHeader.map((rosterDay) => (\n                            <td>\n                              {Object.values(shifts).map((shift_) =>\n                                shift_.map((shift, index, arr) =>\n                                  staff === shift.username &&\n                                  rosterDay == shift.work_date ? (\n                                    shift.start_time === \"\" &&\n                                    rosterDay == shift.work_date ? (\n                                      \"\"\n                                    ) : (\n                                      <p\n                                        onLoad={() =>\n                                          (totalHour +=\n                                            totalHour + shift.shift_duration)\n                                        }\n                                      >\n                                        {shift.work_date}\n                                        <br />\n                                        {shift.start_time}\n                                        {\" To \"} {shift.end_time}\n                                        <br />\n                                        {shift.break_length}\n                                        {\" Hour Break\"}\n                                        <br />\n                                        {shift.shift_duration}\n                                        {\" Hours\"}\n                                      </p>\n                                    )\n                                  ) : (\n                                    \"\"\n                                  )\n                                )\n                              )}\n                            </td>\n                          ))}\n                          <td>\n                            {shifts[staff].reduce(\n                              (totalHour, shift) =>\n                                totalHour + shift.shift_duration,\n                              0\n                            )}\n                          </td>\n                        </tr>\n                      ))}\n                      <tr>\n                        <td>Total</td>\n                        {Object.keys(Total).map((rosterDate) => (\n                          <td>{Total[rosterDate]}</td>\n                        ))}\n                        <td>\n                          {Object.values(Total).reduce(\n                            (total, individualDayTotal) =>\n                              total + individualDayTotal,\n                            0\n                          )}\n                        </td>\n                      </tr>\n                    </tbody>\n                  </MDBTable>\n                </div>\n              </div>\n            </MDBCol>\n          </MDBRow>\n        </MDBCol>\n      </MDBRow>\n      <MDBRow className=\"button-panel\">\n        {/* <MDBCol sm=\"6\" md=\"5\" lg=\"4\" xl=\"3\">\n          <Button href=\"#\" btn-block>\n            Publish\n          </Button>\n        </MDBCol> */}\n        <MDBCol sm=\"6\" md=\"5\" lg=\"4\" xl=\"3\">\n          <Button href=\"/admin\" btn-block>\n            Back to Admin\n          </Button>\n        </MDBCol>\n      </MDBRow>\n    </MDBContainer>\n  );\n}\n\nexport default WeeklyRoster;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  MDBDropdown,\n  MDBDropdownToggle,\n  MDBDropdownMenu,\n  MDBDropdownItem,\n  MDBBtnGroup,\n} from \"mdbreact\";\n\nimport { Button } from \"react-bootstrap\";\nimport useApi from \"../../hooks/useApi\";\nimport Roster from \"./Roster\";\nimport moment from \"moment\";\n\nfunction ViewRosterScreen(props) {\n  const [weekNumber, setWeekNumber] = useState(1);\n  const [shifts, setShifts] = useState([]);\n  const [rosterPeriodDates, setRosterPeriodDates] = useState({});\n  const { data: weekNumbersFromDatabase, request: getWeekNumbers } = useApi(\n    \"/roster/weeks\"\n  );\n  const { data: groups, request: getAllGroups } = useApi(\"/groups\");\n\n  const { data: shiftsFromDatabase, request: getShifts } = useApi(\n    `/roster/shifts/${weekNumber}`\n  );\n\n  const { request: getRosterPeriodDates } = useApi(\n    `/roster/dates/${weekNumber}`\n  );\n\n  const [displayRoster, setDisplayRoster] = useState(false);\n\n  const loadData = async () => {\n    const { data } = await getWeekNumbers();\n    setWeekNumber(data[0].week_number);\n    const shiftsData = await getShifts();\n    const rosterPeriodData = await getRosterPeriodDates();\n\n    setShifts(shiftsData.data);\n    setRosterPeriodDates(rosterPeriodData.data[0]);\n  };\n  useEffect(() => {\n    loadData();\n    getAllGroups();\n\n    console.log(\"date\", moment(1598310000000000));\n  }, []);\n  console.log(\"shifts length \", shifts.length);\n  console.log(\"roster period data\" + rosterPeriodDates.start_date);\n  return (\n    <div>\n      View Roster Screen\n      <MDBBtnGroup>\n        <MDBDropdown>\n          <Button className=\"btn btn-primary mr-0\">\n            {\" \"}\n            {displayRoster ? weekNumber : \"Select Week\"}\n          </Button>\n          <MDBDropdownToggle caret color=\"primary\" />\n          <MDBDropdownMenu color=\"primary\">\n            {weekNumbersFromDatabase.map((week, index) => (\n              <MDBDropdownItem\n                key={index}\n                onMouseLeave={async () => {\n                  let { data } = await getShifts();\n                  setShifts(data);\n                  let rosterPeriods = await getRosterPeriodDates();\n\n                  setRosterPeriodDates(rosterPeriods.data[0]);\n                  setDisplayRoster(true);\n                }}\n                onClick={(e) => {\n                  setDisplayRoster(false);\n                  setWeekNumber(week.week_number);\n                }}\n              >\n                {week.week_number}\n              </MDBDropdownItem>\n            ))}\n          </MDBDropdownMenu>\n        </MDBDropdown>\n      </MDBBtnGroup>\n      {displayRoster && (\n        <Roster\n          shifts={shifts}\n          groups={groups}\n          weekNumber={weekNumber}\n          create={false}\n          startDate={rosterPeriodDates.start_date}\n          endDate={rosterPeriodDates.end_date}\n          title={rosterPeriodDates.title}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default ViewRosterScreen;\n","import React, { useState } from \"react\";\nimport DateFnsUtils from \"@date-io/date-fns\";\nimport { MDBRow, MDBCol, MDBInput } from \"mdbreact\"; // choose your lib\nimport {\n  DatePicker,\n  TimePicker,\n  DateTimePicker,\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from \"@material-ui/pickers\";\nimport {\n  invalidEmailMsg,\n  invalidMinMaxMsg,\n  invalidNumber,\n} from \"../../lib/formValidation\";\n\nfunction RosterAdmin(props) {\n  const [selectedDate, handleDateChange] = useState(new Date());\n  return (\n    <MDBRow center>\n      <MDBCol sm=\"12\" md=\"9\" lg=\"7\" className=\"grey-text\">\n        <form\n          className=\"staff-new-form border border-light\"\n          //   onSubmit={data ? handleUpdateSubmit : handleSubmit}\n        >\n          <p className=\"h5 text-center \">Roster Admin</p>\n          <div className=\"grey-text\">\n            <MDBRow center>\n              <MDBCol sm=\"12\" md=\"9\" lg=\"7\" className=\"staff-new-form\">\n                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                  <KeyboardDatePicker\n                    value={selectedDate}\n                    onChange={handleDateChange}\n                    format=\"dd/MM/yyyy\"\n                    size=\"lg\"\n                    label=\"Start Date\"\n                  />\n                </MuiPickersUtilsProvider>\n              </MDBCol>\n            </MDBRow>\n            <MDBRow center>\n              <MDBCol sm=\"12\" md=\"9\" lg=\"7\">\n                <MDBInput\n                  size=\"lg\"\n                  label=\"Roster Duration Days\"\n                  icon=\"calendar-alt\"\n                  group\n                  type=\"text\"\n                  validate\n                  error=\"wrong\"\n                  success=\"right\"\n                  required\n                  name=\"firstname\"\n                  minLength=\"1\"\n                  maxLength=\"2\"\n                  //   onChange={handleFirstNameChange}\n                  onInvalid={(e) => invalidNumber(e, 2, 20)}\n                  onInput={(e) => invalidNumber(e, 2, 20)}\n                  autoComplete=\"new-password\"\n                  //   value={firstname}\n                />\n              </MDBCol>\n            </MDBRow>\n          </div>\n        </form>\n      </MDBCol>\n    </MDBRow>\n  );\n}\n\nexport default RosterAdmin;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { useAuth } from \"./context/auth\";\n\nfunction PrivateRoute({ component: Component, ...rest }) {\n  const { authTokens } = useAuth();\n\n  return (\n    <Route\n      {...rest}\n      render={(props) =>\n        authTokens ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{ pathname: \"/login\", state: { referer: props.location } }}\n          />\n        )\n      }\n    />\n  );\n}\n\nexport default PrivateRoute;\n","import React, { useState, useMemo } from \"react\";\nimport \"./App.css\";\nimport {\n  Route,\n  NavLink,\n  Switch,\n  BrowserRouter as Router,\n} from \"react-router-dom\";\nimport { MDBContainer, MDBRow, MDBCol } from \"mdbreact\";\nimport ContactUs from \"./Components/ContactUs\";\nimport Login from \"./Components/Login\";\nimport About from \"./Components/About\";\nimport Home from \"./Components/Home\";\nimport StaffListScreen from \"./Components/StaffListScreen\";\nimport StaffNewScreen from \"./Components/StaffNewScreen\";\nimport StaffEditScreen from \"./Components/StaffEditScreen\";\nimport AdminPanel from \"./Components/AdminPanel\";\nimport Footer from \"./Components/Footer\";\nimport NavbarPage from \"./Components/NavbarPage\";\nimport Register from \"./Components/Register\";\nimport PublicHolidays from \"./Components/PublicHolidays\";\nimport RosterScreen from \"./Components/Roster/RosterScreen\";\nimport CreateRosterScreen from \"./Components/Roster/CreateRosterScreen\";\nimport AdminShiftScreen from \"./Components/Admin/AdminShiftScreen\";\nimport Wages from \"./Components/Wages/Wages\"; // 02/09 GJ: Added View Wages component\nimport WeeklyWageRoster from \"./Components/Wages/ViewWeeklyWageRoster\"; //06/09 GJ: added this to support PDF output of weekly wages\nimport WeeklyWageJobRoster from \"./Components/Wages/ViewWeeklyJobWageRoster\"; //07/09: GJ added\nimport WeeklyWageStaffWagesRoster from \"./Components/Wages/ViewWeeklyStaffWagesRoster\"; //07/09: GJ added\nimport CreateGroup from \"./Components/Group/CreateGroup\";\nimport ViewGroups from \"./Components/Group/ViewGroups\";\nimport GroupEditScreen from \"./Components/Group/GroupEditScreen\";\n\nimport ViewRoster from \"./Components/Roster/ViewRoster\";\nimport WeeklyRoster from \"./Components/Roster/WeeklyRoster\";\nimport RosterTemplate from \"./Components/Roster/RosterTemplate\";\nimport ViewRosterScreen from \"./Components/Roster/ViewRosterScreen\";\nimport RosterAdmin from \"./Components/Admin/RosterAdmin\";\nimport PrivateRoute from \"./PrivateRoute\";\nimport { AuthContext } from \"./context/auth\";\n\nfunction App(props) {\n  const existingTokens = JSON.parse(localStorage.getItem(\"tokens\"));\n  console.log(\"existingitem\", existingTokens);\n  const [authTokens, setAuthTokens] = useState(existingTokens);\n\n  const setTokens = (data) => {\n    localStorage.setItem(\"tokens\", JSON.stringify(data));\n    setAuthTokens(data);\n  };\n  return (\n    <AuthContext.Provider value={{ authTokens, setAuthTokens: setTokens }}>\n      <Router>\n        <Switch>\n          <MDBContainer className=\"wrapper screen-font\" fluid>\n            <MDBRow className=\"header\">\n              <MDBCol size=\"12\" sm=\"12\" lg=\"12\">\n                <header>\n                  <h1>\n                    <center>Roster Application</center>{\" \"}\n                  </h1>\n                </header>\n              </MDBCol>\n            </MDBRow>\n            <MDBRow className=\"navigation\">\n              <MDBCol size=\"12\" sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                <NavbarPage />\n              </MDBCol>\n            </MDBRow>\n            <MDBRow className=\"main-content\">\n              <MDBCol size=\"12\" sm=\"12\" md=\"12\" lg=\"12\" xl=\"12\">\n                {/* 02/09 GJ: Added View Wages component */}\n                <Route path=\"/wages\" component={Wages} />\n                <Route\n                  path=\"/viewWeeklyWages/:rosterID\"\n                  component={WeeklyWageRoster}\n                />\n                {/* 07/09: GJ: Added this */}\n                <Route\n                  path=\"/viewWeeklyJobWages/:rosterID\"\n                  component={WeeklyWageJobRoster}\n                />\n                {/* 07/09: GJ: Added this */}\n                <Route\n                  path=\"/viewWeeklyStaffWages/:username\"\n                  component={WeeklyWageStaffWagesRoster}\n                />\n                <PrivateRoute path=\"/rosterAdmin\" component={RosterAdmin} />\n                <PrivateRoute path=\"/ViewRoster\" component={RosterScreen} />\n                <PrivateRoute path=\"/ViewRosterScreen\" component={ViewRoster} />\n\n                <PrivateRoute\n                  path=\"/ViewRosterScreen2\"\n                  component={ViewRosterScreen}\n                />\n                <Route path=\"/about\" component={About} />\n                <Route path=\"/contact\" component={ContactUs} />\n                <PrivateRoute path=\"/admin\" component={AdminPanel} />\n                <Route path=\"/register\" component={Register} />\n                <Route path=\"/login\" component={Login} />\n\n                {authTokens != null &&\n                (authTokens.role.includes(\"Manager\") ||\n                  authTokens.role.includes(\"Supervisor\")) ? (\n                  <>\n                    <PrivateRoute\n                      path=\"/StaffNewScreen\"\n                      component={StaffNewScreen}\n                    />\n                    <PrivateRoute\n                      path=\"/StaffEditScreen\"\n                      component={StaffEditScreen}\n                    />\n                    <PrivateRoute path=\"/ViewGroups\" component={ViewGroups} />\n                    <PrivateRoute\n                      path=\"/GroupEditScreen\"\n                      component={GroupEditScreen}\n                    />\n                    <PrivateRoute\n                      path=\"/CreateRosterScreen\"\n                      component={CreateRosterScreen}\n                    />\n                    <PrivateRoute path=\"/createGroup\" component={CreateGroup} />\n                    <PrivateRoute\n                      path=\"/StaffListScreen\"\n                      component={StaffListScreen}\n                    />\n                  </>\n                ) : (\n                  \"\" // alert(\"Only managers and supervisors can add or edit\")\n                )}\n                <PrivateRoute\n                  path=\"/PublicHolidays\"\n                  component={PublicHolidays}\n                />\n                <PrivateRoute\n                  path=\"/viewWeeklyRoster/:rosterID\"\n                  component={WeeklyRoster}\n                />\n                <PrivateRoute\n                  path=\"/AdminShiftScreen\"\n                  component={AdminShiftScreen}\n                />\n                <Route exact path=\"/\" component={Home} />\n              </MDBCol>\n            </MDBRow>\n          </MDBContainer>\n        </Switch>\n      </Router>\n    </AuthContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// These are helper functions to validate input on various screens\n\n// Styles the color for invalid or valid\nconst displayInvalid = (input, color) => {\n    input.style.borderColor = color;\n    input.previousElementSibling.style.color = color;\n    input.nextElementSibling.style.color = color;\n};\nconst displayValid = (input) => {\n    input.style.borderColor = \"\";\n    input.previousElementSibling.style.color = \"\";\n    input.nextElementSibling.style.color = \"\";\n};\n\n// this checks for a valid email\nconst invalidEmailMsg = (e) => {\n    console.log(\"e = \", e.target);\n    if (e.target.value === \"\") {\n        displayInvalid(e.target, \"red\");\n        e.target.setCustomValidity(\"Required email address\");\n    } else if (e.target.validity.patternMismatch) {\n        displayInvalid(e.target, \"red\");\n        e.target.setCustomValidity(\"please enter a valid email address\");\n    } else {\n        e.target.setCustomValidity(\"\");\n        displayValid(e.target);\n    }\n    return true;\n};\n\n// this checks to make sure the field is greater than MIN but less than MAX\nconst invalidMinMaxMsg = (e, min, max) => {\n    // debugger;\n    console.log(e);\n    const fieldName = e.target.nextElementSibling.textContent;\n    if (e.target.value === \"\") {\n        e.target.setCustomValidity(`${fieldName} is required`);\n        displayInvalid(e.target, \"red\");\n    } else if (e.target.validity.tooShort) {\n        e.target.setCustomValidity(\n            `${fieldName} needs to be at least ${min} characters long.`\n        );\n        displayInvalid(e.target, \"red\");\n    } else if (e.target.validity.tooLong) {\n        e.target.setCustomValidity(\n            `${fieldName} name needs to be between ${min} and ${max} characters long.`\n        );\n        displayInvalid(e.target, \"red\");\n    } else {\n        e.target.setCustomValidity(\"\");\n        displayValid(e.target);\n    }\n    return true;\n};\n\n// this checks to make sure that the field is numeric\nconst invalidNumber = (e, min, max) => {\n    const fieldName = e.target.nextElementSibling.textContent;\n    if (e.target.value === \"\") {\n        e.target.setCustomValidity(`${fieldName} is required`);\n        displayInvalid(e.target, \"red\");\n    } else if (isNaN(e.target.value)) {\n        e.target.setCustomValidity(`${fieldName} needs to be Numeric.`);\n        displayInvalid(e.target, \"red\");\n    } else if (e.target.validity.tooShort) {\n        e.target.setCustomValidity(\n            `${fieldName} needs to be ${min} characters long.`\n        );\n        displayInvalid(e.target, \"red\");\n    } else if (e.target.validity.tooLong) {\n        e.target.setCustomValidity(\n            `${fieldName} needs to be ${max} characters long.`\n        );\n        displayInvalid(e.target, \"red\");\n    } else {\n        e.target.setCustomValidity(\"\");\n        displayValid(e.target);\n    }\n\n    return true;\n};\n\nmodule.exports = {\n    displayInvalid,\n    displayValid,\n    invalidEmailMsg,\n    invalidMinMaxMsg,\n    invalidNumber,\n};\n"],"sourceRoot":""}